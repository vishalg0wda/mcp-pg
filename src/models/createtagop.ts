/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { Conflict, Conflict$zodSchema } from "./conflict.js";
import { Forbidden, Forbidden$zodSchema } from "./forbidden.js";
import {
  InternalServerError,
  InternalServerError$zodSchema,
} from "./internalservererror.js";
import { InviteExpired, InviteExpired$zodSchema } from "./inviteexpired.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import {
  RateLimitExceeded,
  RateLimitExceeded$zodSchema,
} from "./ratelimitexceeded.js";
import { TagSchema, TagSchema$zodSchema } from "./tagschema.js";
import { Unauthorized, Unauthorized$zodSchema } from "./unauthorized.js";
import {
  UnprocessableEntity,
  UnprocessableEntity$zodSchema,
} from "./unprocessableentity.js";

/**
 * The color of the tag. If not provided, a random color will be used from the list: red, yellow, green, blue, purple, pink, brown.
 */
export const CreateTagColor$zodSchema = z.enum([
  "red",
  "yellow",
  "green",
  "blue",
  "purple",
  "pink",
  "brown",
]).describe(
  "The color of the tag. If not provided, a random color will be used from the list: red, yellow, green, blue, purple, pink, brown.",
);

export type CreateTagColor = z.infer<typeof CreateTagColor$zodSchema>;

export type CreateTagRequest = {
  name?: string | undefined;
  color?: CreateTagColor | undefined;
  tag?: string | undefined;
};

export const CreateTagRequest$zodSchema: z.ZodType<
  CreateTagRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  color: CreateTagColor$zodSchema.optional(),
  name: z.string().optional(),
  tag: z.string().optional(),
});

export type CreateTagResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  TagSchema?: TagSchema | undefined;
  BadRequest?: BadRequest | undefined;
  Unauthorized?: Unauthorized | undefined;
  Forbidden?: Forbidden | undefined;
  NotFound?: NotFound | undefined;
  Conflict?: Conflict | undefined;
  InviteExpired?: InviteExpired | undefined;
  UnprocessableEntity?: UnprocessableEntity | undefined;
  RateLimitExceeded?: RateLimitExceeded | undefined;
  InternalServerError?: InternalServerError | undefined;
};

export const CreateTagResponse$zodSchema: z.ZodType<
  CreateTagResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BadRequest: BadRequest$zodSchema.optional(),
  Conflict: Conflict$zodSchema.optional(),
  ContentType: z.string(),
  Forbidden: Forbidden$zodSchema.optional(),
  InternalServerError: InternalServerError$zodSchema.optional(),
  InviteExpired: InviteExpired$zodSchema.optional(),
  NotFound: NotFound$zodSchema.optional(),
  RateLimitExceeded: RateLimitExceeded$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  TagSchema: TagSchema$zodSchema.optional(),
  Unauthorized: Unauthorized$zodSchema.optional(),
  UnprocessableEntity: UnprocessableEntity$zodSchema.optional(),
});
