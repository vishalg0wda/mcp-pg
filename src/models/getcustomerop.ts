/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { Conflict, Conflict$zodSchema } from "./conflict.js";
import { Forbidden, Forbidden$zodSchema } from "./forbidden.js";
import {
  InternalServerError,
  InternalServerError$zodSchema,
} from "./internalservererror.js";
import { InviteExpired, InviteExpired$zodSchema } from "./inviteexpired.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import {
  RateLimitExceeded,
  RateLimitExceeded$zodSchema,
} from "./ratelimitexceeded.js";
import { Unauthorized, Unauthorized$zodSchema } from "./unauthorized.js";
import {
  UnprocessableEntity,
  UnprocessableEntity$zodSchema,
} from "./unprocessableentity.js";

export type GetCustomerRequest = {
  id: string;
  includeExpandedFields?: boolean | undefined;
};

export const GetCustomerRequest$zodSchema: z.ZodType<
  GetCustomerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().describe(
    "The unique ID of the customer. You may use either the customer's `id` on Dub (obtained via `/customers` endpoint) or their `externalId` (unique ID within your system, prefixed with `ext_`, e.g. `ext_123`).",
  ),
  includeExpandedFields: z.boolean().describe(
    "Whether to include expanded fields on the customer (`link`, `partner`, `discount`).",
  ).optional(),
});

export type GetCustomerLink = {
  id: string;
  domain: string;
  key: string;
  shortLink: string;
  url: string;
  programId: string | null;
};

export const GetCustomerLink$zodSchema: z.ZodType<
  GetCustomerLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string(),
  id: z.string(),
  key: z.string(),
  programId: z.string().nullable(),
  shortLink: z.string(),
  url: z.string(),
});

export type GetCustomerPartner = {
  id: string;
  name: string;
  email: string | null;
  image: string | null;
};

export const GetCustomerPartner$zodSchema: z.ZodType<
  GetCustomerPartner,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string().nullable(),
  id: z.string(),
  image: z.string().nullable(),
  name: z.string(),
});

export const GetCustomerType$zodSchema = z.enum([
  "percentage",
  "flat",
]);

export type GetCustomerType = z.infer<typeof GetCustomerType$zodSchema>;

export type GetCustomerDiscount = {
  id: string;
  amount: number;
  type: GetCustomerType;
  maxDuration: number | null;
  description?: string | null | undefined;
  couponId: string | null;
  couponTestId: string | null;
  partnersCount?: number | null | undefined;
};

export const GetCustomerDiscount$zodSchema: z.ZodType<
  GetCustomerDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  couponId: z.string().nullable(),
  couponTestId: z.string().nullable(),
  description: z.string().nullable().optional(),
  id: z.string(),
  maxDuration: z.number().nullable(),
  partnersCount: z.number().nullable().optional(),
  type: GetCustomerType$zodSchema,
});

/**
 * The customer object.
 */
export type GetCustomerResponseBody = {
  id: string;
  externalId: string;
  name: string;
  email?: string | null | undefined;
  avatar?: string | null | undefined;
  country?: string | null | undefined;
  sales?: number | null | undefined;
  saleAmount?: number | null | undefined;
  createdAt: string;
  link?: GetCustomerLink | null | undefined;
  programId?: string | null | undefined;
  partner?: GetCustomerPartner | null | undefined;
  discount?: GetCustomerDiscount | null | undefined;
};

export const GetCustomerResponseBody$zodSchema: z.ZodType<
  GetCustomerResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  avatar: z.string().nullable().optional(),
  country: z.string().nullable().optional(),
  createdAt: z.string(),
  discount: z.lazy(() => GetCustomerDiscount$zodSchema).nullable().optional(),
  email: z.string().nullable().optional(),
  externalId: z.string(),
  id: z.string(),
  link: z.lazy(() => GetCustomerLink$zodSchema).nullable().optional(),
  name: z.string(),
  partner: z.lazy(() => GetCustomerPartner$zodSchema).nullable().optional(),
  programId: z.string().nullable().optional(),
  saleAmount: z.number().nullable().optional(),
  sales: z.number().nullable().optional(),
}).describe("The customer object.");

export type GetCustomerResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  object?: GetCustomerResponseBody | undefined;
  BadRequest?: BadRequest | undefined;
  Unauthorized?: Unauthorized | undefined;
  Forbidden?: Forbidden | undefined;
  NotFound?: NotFound | undefined;
  Conflict?: Conflict | undefined;
  InviteExpired?: InviteExpired | undefined;
  UnprocessableEntity?: UnprocessableEntity | undefined;
  RateLimitExceeded?: RateLimitExceeded | undefined;
  InternalServerError?: InternalServerError | undefined;
};

export const GetCustomerResponse$zodSchema: z.ZodType<
  GetCustomerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BadRequest: BadRequest$zodSchema.optional(),
  Conflict: Conflict$zodSchema.optional(),
  ContentType: z.string(),
  Forbidden: Forbidden$zodSchema.optional(),
  InternalServerError: InternalServerError$zodSchema.optional(),
  InviteExpired: InviteExpired$zodSchema.optional(),
  NotFound: NotFound$zodSchema.optional(),
  RateLimitExceeded: RateLimitExceeded$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  Unauthorized: Unauthorized$zodSchema.optional(),
  UnprocessableEntity: UnprocessableEntity$zodSchema.optional(),
  object: z.lazy(() => GetCustomerResponseBody$zodSchema).optional(),
});
