/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { Conflict, Conflict$zodSchema } from "./conflict.js";
import { Forbidden, Forbidden$zodSchema } from "./forbidden.js";
import {
  InternalServerError,
  InternalServerError$zodSchema,
} from "./internalservererror.js";
import { InviteExpired, InviteExpired$zodSchema } from "./inviteexpired.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import {
  RateLimitExceeded,
  RateLimitExceeded$zodSchema,
} from "./ratelimitexceeded.js";
import { Unauthorized, Unauthorized$zodSchema } from "./unauthorized.js";
import {
  UnprocessableEntity,
  UnprocessableEntity$zodSchema,
} from "./unprocessableentity.js";

/**
 * The mode to use for tracking the lead event. `async` will not block the request; `wait` will block the request until the lead event is fully recorded in Dub.
 */
export const Mode$zodSchema = z.enum([
  "async",
  "wait",
]).describe(
  "The mode to use for tracking the lead event. `async` will not block the request; `wait` will block the request until the lead event is fully recorded in Dub.",
);

export type Mode = z.infer<typeof Mode$zodSchema>;

export type TrackLeadRequest = {
  clickId: string;
  eventName: string;
  externalId: string;
  customerName?: string | null | undefined;
  customerEmail?: string | null | undefined;
  customerAvatar?: string | null | undefined;
  eventQuantity?: number | null | undefined;
  mode?: Mode | undefined;
  metadata?: { [k: string]: any } | null | undefined;
};

export const TrackLeadRequest$zodSchema: z.ZodType<
  TrackLeadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  clickId: z.string(),
  customerAvatar: z.string().nullable().default(null),
  customerEmail: z.string().nullable().default(null),
  customerName: z.string().nullable().default(null),
  eventName: z.string(),
  eventQuantity: z.number().nullable().optional(),
  externalId: z.string(),
  metadata: z.record(z.any()).nullable().optional(),
  mode: Mode$zodSchema.default("async"),
});

export type TrackLeadClick = { id: string };

export const TrackLeadClick$zodSchema: z.ZodType<
  TrackLeadClick,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

export type TrackLeadCustomer = {
  name: string | null;
  email: string | null;
  avatar: string | null;
  externalId: string | null;
};

export const TrackLeadCustomer$zodSchema: z.ZodType<
  TrackLeadCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  avatar: z.string().nullable(),
  email: z.string().nullable(),
  externalId: z.string().nullable(),
  name: z.string().nullable(),
});

/**
 * A lead was tracked.
 */
export type TrackLeadResponseBody = {
  click: TrackLeadClick;
  customer: TrackLeadCustomer;
};

export const TrackLeadResponseBody$zodSchema: z.ZodType<
  TrackLeadResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  click: z.lazy(() => TrackLeadClick$zodSchema),
  customer: z.lazy(() => TrackLeadCustomer$zodSchema),
}).describe("A lead was tracked.");

export type TrackLeadResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  object?: TrackLeadResponseBody | undefined;
  BadRequest?: BadRequest | undefined;
  Unauthorized?: Unauthorized | undefined;
  Forbidden?: Forbidden | undefined;
  NotFound?: NotFound | undefined;
  Conflict?: Conflict | undefined;
  InviteExpired?: InviteExpired | undefined;
  UnprocessableEntity?: UnprocessableEntity | undefined;
  RateLimitExceeded?: RateLimitExceeded | undefined;
  InternalServerError?: InternalServerError | undefined;
};

export const TrackLeadResponse$zodSchema: z.ZodType<
  TrackLeadResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BadRequest: BadRequest$zodSchema.optional(),
  Conflict: Conflict$zodSchema.optional(),
  ContentType: z.string(),
  Forbidden: Forbidden$zodSchema.optional(),
  InternalServerError: InternalServerError$zodSchema.optional(),
  InviteExpired: InviteExpired$zodSchema.optional(),
  NotFound: NotFound$zodSchema.optional(),
  RateLimitExceeded: RateLimitExceeded$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  Unauthorized: Unauthorized$zodSchema.optional(),
  UnprocessableEntity: UnprocessableEntity$zodSchema.optional(),
  object: z.lazy(() => TrackLeadResponseBody$zodSchema).optional(),
});
