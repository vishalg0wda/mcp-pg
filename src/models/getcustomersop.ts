/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { Conflict, Conflict$zodSchema } from "./conflict.js";
import { Forbidden, Forbidden$zodSchema } from "./forbidden.js";
import {
  InternalServerError,
  InternalServerError$zodSchema,
} from "./internalservererror.js";
import { InviteExpired, InviteExpired$zodSchema } from "./inviteexpired.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import {
  RateLimitExceeded,
  RateLimitExceeded$zodSchema,
} from "./ratelimitexceeded.js";
import { Unauthorized, Unauthorized$zodSchema } from "./unauthorized.js";
import {
  UnprocessableEntity,
  UnprocessableEntity$zodSchema,
} from "./unprocessableentity.js";

/**
 * The field to sort the customers by. The default is `createdAt`.
 */
export const GetCustomersSortBy$zodSchema = z.enum([
  "createdAt",
  "saleAmount",
]).describe("The field to sort the customers by. The default is `createdAt`.");

export type GetCustomersSortBy = z.infer<typeof GetCustomersSortBy$zodSchema>;

/**
 * The sort order. The default is `desc`.
 */
export const GetCustomersSortOrder$zodSchema = z.enum([
  "asc",
  "desc",
]).describe("The sort order. The default is `desc`.");

export type GetCustomersSortOrder = z.infer<
  typeof GetCustomersSortOrder$zodSchema
>;

export type GetCustomersRequest = {
  email?: string | undefined;
  externalId?: string | undefined;
  search?: string | undefined;
  country?: string | undefined;
  linkId?: string | undefined;
  includeExpandedFields?: boolean | undefined;
  sortBy?: GetCustomersSortBy | undefined;
  sortOrder?: GetCustomersSortOrder | undefined;
  page?: number | undefined;
  pageSize?: number | undefined;
};

export const GetCustomersRequest$zodSchema: z.ZodType<
  GetCustomersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  country: z.string().describe(
    "A filter on the list based on the customer's `country` field.",
  ).optional(),
  email: z.string().describe(
    "A case-sensitive filter on the list based on the customer's `email` field. The value must be a string. Takes precedence over `externalId`.",
  ).optional(),
  externalId: z.string().describe(
    "A case-sensitive filter on the list based on the customer's `externalId` field. The value must be a string. Takes precedence over `search`.",
  ).optional(),
  includeExpandedFields: z.boolean().describe(
    "Whether to include expanded fields on the customer (`link`, `partner`, `discount`).",
  ).optional(),
  linkId: z.string().describe(
    "A filter on the list based on the customer's `linkId` field (the referral link ID).",
  ).optional(),
  page: z.number().default(1).describe("The page number for pagination."),
  pageSize: z.number().default(100).describe("The number of items per page."),
  search: z.string().describe(
    "A search query to filter customers by email, externalId, or name. If `email` or `externalId` is provided, this will be ignored.",
  ).optional(),
  sortBy: GetCustomersSortBy$zodSchema.default("createdAt"),
  sortOrder: GetCustomersSortOrder$zodSchema.default("desc"),
});

export type GetCustomersLink = {
  id: string;
  domain: string;
  key: string;
  shortLink: string;
  url: string;
  programId: string | null;
};

export const GetCustomersLink$zodSchema: z.ZodType<
  GetCustomersLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string(),
  id: z.string(),
  key: z.string(),
  programId: z.string().nullable(),
  shortLink: z.string(),
  url: z.string(),
});

export type GetCustomersPartner = {
  id: string;
  name: string;
  email: string | null;
  image: string | null;
};

export const GetCustomersPartner$zodSchema: z.ZodType<
  GetCustomersPartner,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string().nullable(),
  id: z.string(),
  image: z.string().nullable(),
  name: z.string(),
});

export const GetCustomersType$zodSchema = z.enum([
  "percentage",
  "flat",
]);

export type GetCustomersType = z.infer<typeof GetCustomersType$zodSchema>;

export type GetCustomersDiscount = {
  id: string;
  amount: number;
  type: GetCustomersType;
  maxDuration: number | null;
  description?: string | null | undefined;
  couponId: string | null;
  couponTestId: string | null;
  partnersCount?: number | null | undefined;
};

export const GetCustomersDiscount$zodSchema: z.ZodType<
  GetCustomersDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  couponId: z.string().nullable(),
  couponTestId: z.string().nullable(),
  description: z.string().nullable().optional(),
  id: z.string(),
  maxDuration: z.number().nullable(),
  partnersCount: z.number().nullable().optional(),
  type: GetCustomersType$zodSchema,
});

export type GetCustomersResponseBody = {
  id: string;
  externalId: string;
  name: string;
  email?: string | null | undefined;
  avatar?: string | null | undefined;
  country?: string | null | undefined;
  sales?: number | null | undefined;
  saleAmount?: number | null | undefined;
  createdAt: string;
  link?: GetCustomersLink | null | undefined;
  programId?: string | null | undefined;
  partner?: GetCustomersPartner | null | undefined;
  discount?: GetCustomersDiscount | null | undefined;
};

export const GetCustomersResponseBody$zodSchema: z.ZodType<
  GetCustomersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  avatar: z.string().nullable().optional(),
  country: z.string().nullable().optional(),
  createdAt: z.string(),
  discount: z.lazy(() => GetCustomersDiscount$zodSchema).nullable().optional(),
  email: z.string().nullable().optional(),
  externalId: z.string(),
  id: z.string(),
  link: z.lazy(() => GetCustomersLink$zodSchema).nullable().optional(),
  name: z.string(),
  partner: z.lazy(() => GetCustomersPartner$zodSchema).nullable().optional(),
  programId: z.string().nullable().optional(),
  saleAmount: z.number().nullable().optional(),
  sales: z.number().nullable().optional(),
});

export type GetCustomersResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  ResponseBodies?: Array<GetCustomersResponseBody> | undefined;
  BadRequest?: BadRequest | undefined;
  Unauthorized?: Unauthorized | undefined;
  Forbidden?: Forbidden | undefined;
  NotFound?: NotFound | undefined;
  Conflict?: Conflict | undefined;
  InviteExpired?: InviteExpired | undefined;
  UnprocessableEntity?: UnprocessableEntity | undefined;
  RateLimitExceeded?: RateLimitExceeded | undefined;
  InternalServerError?: InternalServerError | undefined;
};

export const GetCustomersResponse$zodSchema: z.ZodType<
  GetCustomersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BadRequest: BadRequest$zodSchema.optional(),
  Conflict: Conflict$zodSchema.optional(),
  ContentType: z.string(),
  Forbidden: Forbidden$zodSchema.optional(),
  InternalServerError: InternalServerError$zodSchema.optional(),
  InviteExpired: InviteExpired$zodSchema.optional(),
  NotFound: NotFound$zodSchema.optional(),
  RateLimitExceeded: RateLimitExceeded$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  ResponseBodies: z.array(z.lazy(() => GetCustomersResponseBody$zodSchema))
    .describe("The list of customers.").optional(),
  StatusCode: z.number().int(),
  Unauthorized: Unauthorized$zodSchema.optional(),
  UnprocessableEntity: UnprocessableEntity$zodSchema.optional(),
});
