/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { Conflict, Conflict$zodSchema } from "./conflict.js";
import { Forbidden, Forbidden$zodSchema } from "./forbidden.js";
import {
  InternalServerError,
  InternalServerError$zodSchema,
} from "./internalservererror.js";
import { InviteExpired, InviteExpired$zodSchema } from "./inviteexpired.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import {
  RateLimitExceeded,
  RateLimitExceeded$zodSchema,
} from "./ratelimitexceeded.js";
import { Unauthorized, Unauthorized$zodSchema } from "./unauthorized.js";
import {
  UnprocessableEntity,
  UnprocessableEntity$zodSchema,
} from "./unprocessableentity.js";

/**
 * Useful for marking a commission as refunded, duplicate, canceled, or fraudulent. Takes precedence over `amount` and `modifyAmount`. When a commission is marked as refunded, duplicate, canceled, or fraudulent, it will be omitted from the payout, and the payout amount will be recalculated accordingly. Paid commissions cannot be updated.
 */
export const StatusRequest$zodSchema = z.enum([
  "refunded",
  "duplicate",
  "canceled",
  "fraud",
]).describe(
  "Useful for marking a commission as refunded, duplicate, canceled, or fraudulent. Takes precedence over `amount` and `modifyAmount`. When a commission is marked as refunded, duplicate, canceled, or fraudulent, it will be omitted from the payout, and the payout amount will be recalculated accordingly. Paid commissions cannot be updated.",
);

export type StatusRequest = z.infer<typeof StatusRequest$zodSchema>;

export type UpdateCommissionRequestBody = {
  amount?: number | undefined;
  modifyAmount?: number | undefined;
  currency?: string | undefined;
  status?: StatusRequest | undefined;
};

export const UpdateCommissionRequestBody$zodSchema: z.ZodType<
  UpdateCommissionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().optional(),
  currency: z.string().default("usd"),
  modifyAmount: z.number().optional(),
  status: StatusRequest$zodSchema.optional(),
});

export type UpdateCommissionRequest = {
  id: string;
  RequestBody?: UpdateCommissionRequestBody | undefined;
};

export const UpdateCommissionRequest$zodSchema: z.ZodType<
  UpdateCommissionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() => UpdateCommissionRequestBody$zodSchema).optional(),
  id: z.string().describe("The commission's unique ID on Dub."),
});

export const UpdateCommissionType$zodSchema = z.enum([
  "click",
  "lead",
  "sale",
  "custom",
]);

export type UpdateCommissionType = z.infer<
  typeof UpdateCommissionType$zodSchema
>;

export const UpdateCommissionStatusResponse$zodSchema = z.enum([
  "pending",
  "processed",
  "paid",
  "refunded",
  "duplicate",
  "fraud",
  "canceled",
]);

export type UpdateCommissionStatusResponse = z.infer<
  typeof UpdateCommissionStatusResponse$zodSchema
>;

/**
 * The updated commission.
 */
export type UpdateCommissionResponseBody = {
  id: string;
  type?: UpdateCommissionType | undefined;
  amount: number;
  earnings: number;
  currency: string;
  status: UpdateCommissionStatusResponse;
  invoiceId?: string | null | undefined;
  description?: string | null | undefined;
  createdAt: string;
  updatedAt: string;
};

export const UpdateCommissionResponseBody$zodSchema: z.ZodType<
  UpdateCommissionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  createdAt: z.string(),
  currency: z.string(),
  description: z.string().nullable().optional(),
  earnings: z.number(),
  id: z.string(),
  invoiceId: z.string().nullable().optional(),
  status: UpdateCommissionStatusResponse$zodSchema,
  type: UpdateCommissionType$zodSchema.optional(),
  updatedAt: z.string(),
}).describe("The updated commission.");

export type UpdateCommissionResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  object?: UpdateCommissionResponseBody | undefined;
  BadRequest?: BadRequest | undefined;
  Unauthorized?: Unauthorized | undefined;
  Forbidden?: Forbidden | undefined;
  NotFound?: NotFound | undefined;
  Conflict?: Conflict | undefined;
  InviteExpired?: InviteExpired | undefined;
  UnprocessableEntity?: UnprocessableEntity | undefined;
  RateLimitExceeded?: RateLimitExceeded | undefined;
  InternalServerError?: InternalServerError | undefined;
};

export const UpdateCommissionResponse$zodSchema: z.ZodType<
  UpdateCommissionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BadRequest: BadRequest$zodSchema.optional(),
  Conflict: Conflict$zodSchema.optional(),
  ContentType: z.string(),
  Forbidden: Forbidden$zodSchema.optional(),
  InternalServerError: InternalServerError$zodSchema.optional(),
  InviteExpired: InviteExpired$zodSchema.optional(),
  NotFound: NotFound$zodSchema.optional(),
  RateLimitExceeded: RateLimitExceeded$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  Unauthorized: Unauthorized$zodSchema.optional(),
  UnprocessableEntity: UnprocessableEntity$zodSchema.optional(),
  object: z.lazy(() => UpdateCommissionResponseBody$zodSchema).optional(),
});
