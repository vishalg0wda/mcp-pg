/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { Conflict, Conflict$zodSchema } from "./conflict.js";
import { Forbidden, Forbidden$zodSchema } from "./forbidden.js";
import {
  InternalServerError,
  InternalServerError$zodSchema,
} from "./internalservererror.js";
import { InviteExpired, InviteExpired$zodSchema } from "./inviteexpired.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import {
  RateLimitExceeded,
  RateLimitExceeded$zodSchema,
} from "./ratelimitexceeded.js";
import { Unauthorized, Unauthorized$zodSchema } from "./unauthorized.js";
import {
  UnprocessableEntity,
  UnprocessableEntity$zodSchema,
} from "./unprocessableentity.js";

/**
 * The domains to search. We only support .link domains for now.
 */
export type Domains = string | Array<string>;

export const Domains$zodSchema: z.ZodType<Domains, z.ZodTypeDef, unknown> = z
  .union([
    z.string(),
    z.array(z.string()),
  ]).describe("The domains to search. We only support .link domains for now.");

export type CheckDomainStatusRequest = { domains: string | Array<string> };

export const CheckDomainStatusRequest$zodSchema: z.ZodType<
  CheckDomainStatusRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  domains: z.union([
    z.string(),
    z.array(z.string()),
  ]),
});

export type CheckDomainStatusResponseBody = {
  domain: string;
  available: boolean;
  price: string | null;
  premium: boolean | null;
};

export const CheckDomainStatusResponseBody$zodSchema: z.ZodType<
  CheckDomainStatusResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  available: z.boolean(),
  domain: z.string(),
  premium: z.boolean().nullable(),
  price: z.string().nullable(),
});

export type CheckDomainStatusResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  ResponseBodies?: Array<CheckDomainStatusResponseBody> | undefined;
  BadRequest?: BadRequest | undefined;
  Unauthorized?: Unauthorized | undefined;
  Forbidden?: Forbidden | undefined;
  NotFound?: NotFound | undefined;
  Conflict?: Conflict | undefined;
  InviteExpired?: InviteExpired | undefined;
  UnprocessableEntity?: UnprocessableEntity | undefined;
  RateLimitExceeded?: RateLimitExceeded | undefined;
  InternalServerError?: InternalServerError | undefined;
};

export const CheckDomainStatusResponse$zodSchema: z.ZodType<
  CheckDomainStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BadRequest: BadRequest$zodSchema.optional(),
  Conflict: Conflict$zodSchema.optional(),
  ContentType: z.string(),
  Forbidden: Forbidden$zodSchema.optional(),
  InternalServerError: InternalServerError$zodSchema.optional(),
  InviteExpired: InviteExpired$zodSchema.optional(),
  NotFound: NotFound$zodSchema.optional(),
  RateLimitExceeded: RateLimitExceeded$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  ResponseBodies: z.array(z.lazy(() => CheckDomainStatusResponseBody$zodSchema))
    .describe("The domain status was retrieved.").optional(),
  StatusCode: z.number().int(),
  Unauthorized: Unauthorized$zodSchema.optional(),
  UnprocessableEntity: UnprocessableEntity$zodSchema.optional(),
});
