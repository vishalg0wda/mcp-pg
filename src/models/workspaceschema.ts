/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The plan of the workspace.
 */
export const Plan$zodSchema = z.enum([
  "free",
  "pro",
  "business",
  "business plus",
  "business extra",
  "business max",
  "advanced",
  "enterprise",
]).describe("The plan of the workspace.");

export type Plan = z.infer<typeof Plan$zodSchema>;

/**
 * The role of the authenticated user in the workspace.
 */
export const Role$zodSchema = z.enum([
  "owner",
  "member",
]).describe("The role of the authenticated user in the workspace.");

export type Role = z.infer<typeof Role$zodSchema>;

export type User = { role: Role; defaultFolderId: string | null };

export const User$zodSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z.object({
  defaultFolderId: z.string().nullable(),
  role: Role$zodSchema,
});

export type Domain = {
  slug: string;
  primary?: boolean | undefined;
  verified?: boolean | undefined;
};

export const Domain$zodSchema: z.ZodType<Domain, z.ZodTypeDef, unknown> = z
  .object({
    primary: z.boolean().default(false),
    slug: z.string(),
    verified: z.boolean().default(false),
  });

export type WorkspaceSchema = {
  id: string;
  name: string;
  slug: string;
  logo?: string | null | undefined;
  inviteCode: string | null;
  plan: Plan;
  stripeId: string | null;
  billingCycleStart: number;
  paymentFailedAt: string | null;
  stripeConnectId: string | null;
  totalLinks: number;
  usage: number;
  usageLimit: number;
  linksUsage: number;
  linksLimit: number;
  payoutsUsage: number;
  payoutsLimit: number;
  payoutFee: number;
  domainsLimit: number;
  tagsLimit: number;
  foldersUsage: number;
  foldersLimit: number;
  usersLimit: number;
  aiUsage: number;
  aiLimit: number;
  conversionEnabled: boolean;
  dotLinkClaimed: boolean;
  partnersEnabled: boolean;
  createdAt: string;
  users: Array<User>;
  domains: Array<Domain>;
  flags?: { [k: string]: boolean } | undefined;
  store: { [k: string]: any } | null;
  allowedHostnames: Array<string> | null;
};

export const WorkspaceSchema$zodSchema: z.ZodType<
  WorkspaceSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  aiLimit: z.number(),
  aiUsage: z.number(),
  allowedHostnames: z.array(z.string()).nullable(),
  billingCycleStart: z.number(),
  conversionEnabled: z.boolean(),
  createdAt: z.string(),
  domains: z.array(z.lazy(() => Domain$zodSchema)),
  domainsLimit: z.number(),
  dotLinkClaimed: z.boolean(),
  flags: z.record(z.boolean()).optional(),
  foldersLimit: z.number(),
  foldersUsage: z.number(),
  id: z.string(),
  inviteCode: z.string().nullable(),
  linksLimit: z.number(),
  linksUsage: z.number(),
  logo: z.string().nullable().default(null),
  name: z.string(),
  partnersEnabled: z.boolean(),
  paymentFailedAt: z.string().nullable(),
  payoutFee: z.number(),
  payoutsLimit: z.number(),
  payoutsUsage: z.number(),
  plan: Plan$zodSchema,
  slug: z.string(),
  store: z.record(z.any()).nullable(),
  stripeConnectId: z.string().nullable(),
  stripeId: z.string().nullable(),
  tagsLimit: z.number(),
  totalLinks: z.number(),
  usage: z.number(),
  usageLimit: z.number(),
  users: z.array(z.lazy(() => User$zodSchema)),
  usersLimit: z.number(),
});
