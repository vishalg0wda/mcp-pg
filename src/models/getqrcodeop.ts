/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { Conflict, Conflict$zodSchema } from "./conflict.js";
import { Forbidden, Forbidden$zodSchema } from "./forbidden.js";
import {
  InternalServerError,
  InternalServerError$zodSchema,
} from "./internalservererror.js";
import { InviteExpired, InviteExpired$zodSchema } from "./inviteexpired.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import {
  RateLimitExceeded,
  RateLimitExceeded$zodSchema,
} from "./ratelimitexceeded.js";
import { Unauthorized, Unauthorized$zodSchema } from "./unauthorized.js";
import {
  UnprocessableEntity,
  UnprocessableEntity$zodSchema,
} from "./unprocessableentity.js";

/**
 * The level of error correction to use for the QR code. Defaults to `L` if not provided.
 */
export const Level$zodSchema = z.enum([
  "L",
  "M",
  "Q",
  "H",
]).describe(
  "The level of error correction to use for the QR code. Defaults to `L` if not provided.",
);

export type Level = z.infer<typeof Level$zodSchema>;

export type GetQRCodeRequest = {
  url: string;
  logo?: string | undefined;
  size?: number | undefined;
  level?: Level | undefined;
  fgColor?: string | undefined;
  bgColor?: string | undefined;
  hideLogo?: boolean | undefined;
  margin?: number | undefined;
  includeMargin?: boolean | undefined;
};

export const GetQRCodeRequest$zodSchema: z.ZodType<
  GetQRCodeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  bgColor: z.string().default("#FFFFFF").describe(
    "The background color of the QR code in hex format. Defaults to `#ffffff` if not provided.",
  ),
  fgColor: z.string().default("#000000").describe(
    "The foreground color of the QR code in hex format. Defaults to `#000000` if not provided.",
  ),
  hideLogo: z.boolean().default(false).describe(
    "Whether to hide the logo in the QR code. Can only be used with a paid plan on Dub.",
  ),
  includeMargin: z.boolean().default(true).describe(
    "DEPRECATED: Margin is included by default. Use the `margin` prop to customize the margin size.",
  ),
  level: Level$zodSchema.default("L"),
  logo: z.string().describe(
    "The logo to include in the QR code. Can only be used with a paid plan on Dub.",
  ).optional(),
  margin: z.number().default(2).describe(
    "The size of the margin around the QR code. Defaults to 2 if not provided.",
  ),
  size: z.number().default(600).describe(
    "The size of the QR code in pixels. Defaults to `600` if not provided.",
  ),
  url: z.string().describe("The URL to generate a QR code for."),
});

export type GetQRCodeResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  res?: string | undefined;
  BadRequest?: BadRequest | undefined;
  Unauthorized?: Unauthorized | undefined;
  Forbidden?: Forbidden | undefined;
  NotFound?: NotFound | undefined;
  Conflict?: Conflict | undefined;
  InviteExpired?: InviteExpired | undefined;
  UnprocessableEntity?: UnprocessableEntity | undefined;
  RateLimitExceeded?: RateLimitExceeded | undefined;
  InternalServerError?: InternalServerError | undefined;
};

export const GetQRCodeResponse$zodSchema: z.ZodType<
  GetQRCodeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BadRequest: BadRequest$zodSchema.optional(),
  Conflict: Conflict$zodSchema.optional(),
  ContentType: z.string(),
  Forbidden: Forbidden$zodSchema.optional(),
  InternalServerError: InternalServerError$zodSchema.optional(),
  InviteExpired: InviteExpired$zodSchema.optional(),
  NotFound: NotFound$zodSchema.optional(),
  RateLimitExceeded: RateLimitExceeded$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  Unauthorized: Unauthorized$zodSchema.optional(),
  UnprocessableEntity: UnprocessableEntity$zodSchema.optional(),
  res: z.string().describe("The QR code").optional(),
});
