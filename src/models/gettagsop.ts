/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { Conflict, Conflict$zodSchema } from "./conflict.js";
import { Forbidden, Forbidden$zodSchema } from "./forbidden.js";
import {
  InternalServerError,
  InternalServerError$zodSchema,
} from "./internalservererror.js";
import { InviteExpired, InviteExpired$zodSchema } from "./inviteexpired.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import {
  RateLimitExceeded,
  RateLimitExceeded$zodSchema,
} from "./ratelimitexceeded.js";
import { TagSchema, TagSchema$zodSchema } from "./tagschema.js";
import { Unauthorized, Unauthorized$zodSchema } from "./unauthorized.js";
import {
  UnprocessableEntity,
  UnprocessableEntity$zodSchema,
} from "./unprocessableentity.js";

/**
 * The field to sort the tags by.
 */
export const GetTagsSortBy$zodSchema = z.enum([
  "name",
  "createdAt",
]).describe("The field to sort the tags by.");

export type GetTagsSortBy = z.infer<typeof GetTagsSortBy$zodSchema>;

/**
 * The order to sort the tags by.
 */
export const GetTagsSortOrder$zodSchema = z.enum([
  "asc",
  "desc",
]).describe("The order to sort the tags by.");

export type GetTagsSortOrder = z.infer<typeof GetTagsSortOrder$zodSchema>;

/**
 * IDs of tags to filter by.
 */
export type Ids = string | Array<string>;

export const Ids$zodSchema: z.ZodType<Ids, z.ZodTypeDef, unknown> = z.union([
  z.string(),
  z.array(z.string()),
]).describe("IDs of tags to filter by.");

export type GetTagsRequest = {
  sortBy?: GetTagsSortBy | undefined;
  sortOrder?: GetTagsSortOrder | undefined;
  search?: string | undefined;
  ids?: string | Array<string> | undefined;
  page?: number | undefined;
  pageSize?: number | undefined;
};

export const GetTagsRequest$zodSchema: z.ZodType<
  GetTagsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.union([
    z.string(),
    z.array(z.string()),
  ]).optional(),
  page: z.number().default(1).describe("The page number for pagination."),
  pageSize: z.number().default(100).describe("The number of items per page."),
  search: z.string().describe("The search term to filter the tags by.")
    .optional(),
  sortBy: GetTagsSortBy$zodSchema.default("name"),
  sortOrder: GetTagsSortOrder$zodSchema.default("asc"),
});

export type GetTagsResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  TagSchemas?: Array<TagSchema> | undefined;
  BadRequest?: BadRequest | undefined;
  Unauthorized?: Unauthorized | undefined;
  Forbidden?: Forbidden | undefined;
  NotFound?: NotFound | undefined;
  Conflict?: Conflict | undefined;
  InviteExpired?: InviteExpired | undefined;
  UnprocessableEntity?: UnprocessableEntity | undefined;
  RateLimitExceeded?: RateLimitExceeded | undefined;
  InternalServerError?: InternalServerError | undefined;
};

export const GetTagsResponse$zodSchema: z.ZodType<
  GetTagsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BadRequest: BadRequest$zodSchema.optional(),
  Conflict: Conflict$zodSchema.optional(),
  ContentType: z.string(),
  Forbidden: Forbidden$zodSchema.optional(),
  InternalServerError: InternalServerError$zodSchema.optional(),
  InviteExpired: InviteExpired$zodSchema.optional(),
  NotFound: NotFound$zodSchema.optional(),
  RateLimitExceeded: RateLimitExceeded$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  TagSchemas: z.array(TagSchema$zodSchema).describe("A list of tags")
    .optional(),
  Unauthorized: Unauthorized$zodSchema.optional(),
  UnprocessableEntity: UnprocessableEntity$zodSchema.optional(),
});
