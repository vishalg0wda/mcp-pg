/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { Conflict, Conflict$zodSchema } from "./conflict.js";
import { DomainSchema, DomainSchema$zodSchema } from "./domainschema.js";
import { Forbidden, Forbidden$zodSchema } from "./forbidden.js";
import {
  InternalServerError,
  InternalServerError$zodSchema,
} from "./internalservererror.js";
import { InviteExpired, InviteExpired$zodSchema } from "./inviteexpired.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import {
  RateLimitExceeded,
  RateLimitExceeded$zodSchema,
} from "./ratelimitexceeded.js";
import { Unauthorized, Unauthorized$zodSchema } from "./unauthorized.js";
import {
  UnprocessableEntity,
  UnprocessableEntity$zodSchema,
} from "./unprocessableentity.js";

export type UpdateDomainRequestBody = {
  slug?: string | undefined;
  expiredUrl?: string | null | undefined;
  notFoundUrl?: string | null | undefined;
  archived?: boolean | undefined;
  placeholder?: string | null | undefined;
  logo?: string | null | undefined;
  assetLinks?: string | null | undefined;
  appleAppSiteAssociation?: string | null | undefined;
};

export const UpdateDomainRequestBody$zodSchema: z.ZodType<
  UpdateDomainRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  appleAppSiteAssociation: z.string().nullable().optional(),
  archived: z.boolean().default(false),
  assetLinks: z.string().nullable().optional(),
  expiredUrl: z.string().nullable().optional(),
  logo: z.string().nullable().optional(),
  notFoundUrl: z.string().nullable().optional(),
  placeholder: z.string().nullable().optional(),
  slug: z.string().optional(),
});

export type UpdateDomainRequest = {
  slug: string;
  RequestBody?: UpdateDomainRequestBody | undefined;
};

export const UpdateDomainRequest$zodSchema: z.ZodType<
  UpdateDomainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() => UpdateDomainRequestBody$zodSchema).optional(),
  slug: z.string().describe("The domain name."),
});

export type UpdateDomainResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  DomainSchema?: DomainSchema | undefined;
  BadRequest?: BadRequest | undefined;
  Unauthorized?: Unauthorized | undefined;
  Forbidden?: Forbidden | undefined;
  NotFound?: NotFound | undefined;
  Conflict?: Conflict | undefined;
  InviteExpired?: InviteExpired | undefined;
  UnprocessableEntity?: UnprocessableEntity | undefined;
  RateLimitExceeded?: RateLimitExceeded | undefined;
  InternalServerError?: InternalServerError | undefined;
};

export const UpdateDomainResponse$zodSchema: z.ZodType<
  UpdateDomainResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BadRequest: BadRequest$zodSchema.optional(),
  Conflict: Conflict$zodSchema.optional(),
  ContentType: z.string(),
  DomainSchema: DomainSchema$zodSchema.optional(),
  Forbidden: Forbidden$zodSchema.optional(),
  InternalServerError: InternalServerError$zodSchema.optional(),
  InviteExpired: InviteExpired$zodSchema.optional(),
  NotFound: NotFound$zodSchema.optional(),
  RateLimitExceeded: RateLimitExceeded$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  Unauthorized: Unauthorized$zodSchema.optional(),
  UnprocessableEntity: UnprocessableEntity$zodSchema.optional(),
});
