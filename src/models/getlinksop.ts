/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { Conflict, Conflict$zodSchema } from "./conflict.js";
import { Forbidden, Forbidden$zodSchema } from "./forbidden.js";
import {
  InternalServerError,
  InternalServerError$zodSchema,
} from "./internalservererror.js";
import { InviteExpired, InviteExpired$zodSchema } from "./inviteexpired.js";
import { LinkSchema, LinkSchema$zodSchema } from "./linkschema.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import {
  RateLimitExceeded,
  RateLimitExceeded$zodSchema,
} from "./ratelimitexceeded.js";
import { Unauthorized, Unauthorized$zodSchema } from "./unauthorized.js";
import {
  UnprocessableEntity,
  UnprocessableEntity$zodSchema,
} from "./unprocessableentity.js";

/**
 * The tag IDs to filter the links by.
 */
export type GetLinksTagIds = string | Array<string>;

export const GetLinksTagIds$zodSchema: z.ZodType<
  GetLinksTagIds,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.string()),
]).describe("The tag IDs to filter the links by.");

/**
 * The unique name of the tags assigned to the short link (case insensitive).
 */
export type GetLinksTagNames = string | Array<string>;

export const GetLinksTagNames$zodSchema: z.ZodType<
  GetLinksTagNames,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.string()),
]).describe(
  "The unique name of the tags assigned to the short link (case insensitive).",
);

/**
 * The field to sort the links by. The default is `createdAt`.
 */
export const GetLinksSortBy$zodSchema = z.enum([
  "createdAt",
  "clicks",
  "saleAmount",
  "lastClicked",
]).describe("The field to sort the links by. The default is `createdAt`.");

export type GetLinksSortBy = z.infer<typeof GetLinksSortBy$zodSchema>;

/**
 * The sort order. The default is `desc`.
 */
export const GetLinksSortOrder$zodSchema = z.enum([
  "asc",
  "desc",
]).describe("The sort order. The default is `desc`.");

export type GetLinksSortOrder = z.infer<typeof GetLinksSortOrder$zodSchema>;

/**
 * DEPRECATED. Use `sortBy` instead.
 *
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export const Sort$zodSchema = z.enum([
  "createdAt",
  "clicks",
  "saleAmount",
  "lastClicked",
]).describe("DEPRECATED. Use `sortBy` instead.");

export type Sort = z.infer<typeof Sort$zodSchema>;

export type GetLinksRequest = {
  domain?: string | undefined;
  tagId?: string | undefined;
  tagIds?: string | Array<string> | undefined;
  tagNames?: string | Array<string> | undefined;
  folderId?: string | undefined;
  search?: string | undefined;
  userId?: string | undefined;
  tenantId?: string | undefined;
  showArchived?: boolean | undefined;
  withTags?: boolean | undefined;
  sortBy?: GetLinksSortBy | undefined;
  sortOrder?: GetLinksSortOrder | undefined;
  sort?: Sort | undefined;
  page?: number | undefined;
  pageSize?: number | undefined;
};

export const GetLinksRequest$zodSchema: z.ZodType<
  GetLinksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string().describe(
    "The domain to filter the links by. E.g. `ac.me`. If not provided, all links for the workspace will be returned.",
  ).optional(),
  folderId: z.string().describe("The folder ID to filter the links by.")
    .optional(),
  page: z.number().default(1).describe("The page number for pagination."),
  pageSize: z.number().default(100).describe("The number of items per page."),
  search: z.string().describe(
    "The search term to filter the links by. The search term will be matched against the short link slug and the destination url.",
  ).optional(),
  showArchived: z.boolean().default(false).describe(
    "Whether to include archived links in the response. Defaults to `false` if not provided.",
  ),
  sort: Sort$zodSchema.default("createdAt"),
  sortBy: GetLinksSortBy$zodSchema.default("createdAt"),
  sortOrder: GetLinksSortOrder$zodSchema.default("desc"),
  tagId: z.string().describe(
    "Deprecated. Use `tagIds` instead. The tag ID to filter the links by.",
  ).optional(),
  tagIds: z.union([
    z.string(),
    z.array(z.string()),
  ]).optional(),
  tagNames: z.union([
    z.string(),
    z.array(z.string()),
  ]).optional(),
  tenantId: z.string().describe(
    "The ID of the tenant that created the link inside your system. If set, will only return links for the specified tenant.",
  ).optional(),
  userId: z.string().describe("The user ID to filter the links by.").optional(),
  withTags: z.boolean().default(false).describe(
    "DEPRECATED. Filter for links that have at least one tag assigned to them.",
  ),
});

export type GetLinksResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  LinkSchemas?: Array<LinkSchema> | undefined;
  BadRequest?: BadRequest | undefined;
  Unauthorized?: Unauthorized | undefined;
  Forbidden?: Forbidden | undefined;
  NotFound?: NotFound | undefined;
  Conflict?: Conflict | undefined;
  InviteExpired?: InviteExpired | undefined;
  UnprocessableEntity?: UnprocessableEntity | undefined;
  RateLimitExceeded?: RateLimitExceeded | undefined;
  InternalServerError?: InternalServerError | undefined;
};

export const GetLinksResponse$zodSchema: z.ZodType<
  GetLinksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BadRequest: BadRequest$zodSchema.optional(),
  Conflict: Conflict$zodSchema.optional(),
  ContentType: z.string(),
  Forbidden: Forbidden$zodSchema.optional(),
  InternalServerError: InternalServerError$zodSchema.optional(),
  InviteExpired: InviteExpired$zodSchema.optional(),
  LinkSchemas: z.array(LinkSchema$zodSchema).describe("A list of links")
    .optional(),
  NotFound: NotFound$zodSchema.optional(),
  RateLimitExceeded: RateLimitExceeded$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  Unauthorized: Unauthorized$zodSchema.optional(),
  UnprocessableEntity: UnprocessableEntity$zodSchema.optional(),
});
