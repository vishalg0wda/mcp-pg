/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { Conflict, Conflict$zodSchema } from "./conflict.js";
import { Forbidden, Forbidden$zodSchema } from "./forbidden.js";
import {
  InternalServerError,
  InternalServerError$zodSchema,
} from "./internalservererror.js";
import { InviteExpired, InviteExpired$zodSchema } from "./inviteexpired.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import {
  RateLimitExceeded,
  RateLimitExceeded$zodSchema,
} from "./ratelimitexceeded.js";
import { Unauthorized, Unauthorized$zodSchema } from "./unauthorized.js";
import {
  UnprocessableEntity,
  UnprocessableEntity$zodSchema,
} from "./unprocessableentity.js";

/**
 * The tag IDs to filter the links by.
 */
export type GetLinksCountTagIds = string | Array<string>;

export const GetLinksCountTagIds$zodSchema: z.ZodType<
  GetLinksCountTagIds,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.string()),
]).describe("The tag IDs to filter the links by.");

/**
 * The unique name of the tags assigned to the short link (case insensitive).
 */
export type GetLinksCountTagNames = string | Array<string>;

export const GetLinksCountTagNames$zodSchema: z.ZodType<
  GetLinksCountTagNames,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.string()),
]).describe(
  "The unique name of the tags assigned to the short link (case insensitive).",
);

export const GroupByFolderID$zodSchema = z.enum([
  "folderId",
]);

export type GroupByFolderID = z.infer<typeof GroupByFolderID$zodSchema>;

export const GroupByUserID$zodSchema = z.enum([
  "userId",
]);

export type GroupByUserID = z.infer<typeof GroupByUserID$zodSchema>;

export const GroupByTagID$zodSchema = z.enum([
  "tagId",
]);

export type GroupByTagID = z.infer<typeof GroupByTagID$zodSchema>;

export const GroupByDomain$zodSchema = z.enum([
  "domain",
]);

export type GroupByDomain = z.infer<typeof GroupByDomain$zodSchema>;

/**
 * The field to group the links by.
 */
export type GroupBy =
  | GroupByDomain
  | GroupByTagID
  | GroupByUserID
  | GroupByFolderID;

export const GroupBy$zodSchema: z.ZodType<GroupBy, z.ZodTypeDef, unknown> = z
  .union([
    GroupByDomain$zodSchema,
    GroupByTagID$zodSchema,
    GroupByUserID$zodSchema,
    GroupByFolderID$zodSchema,
  ]).describe("The field to group the links by.");

export type GetLinksCountRequest = {
  domain?: string | undefined;
  tagId?: string | undefined;
  tagIds?: string | Array<string> | undefined;
  tagNames?: string | Array<string> | undefined;
  folderId?: string | undefined;
  search?: string | undefined;
  userId?: string | undefined;
  tenantId?: string | undefined;
  showArchived?: boolean | undefined;
  withTags?: boolean | undefined;
  groupBy?:
    | GroupByDomain
    | GroupByTagID
    | GroupByUserID
    | GroupByFolderID
    | undefined;
};

export const GetLinksCountRequest$zodSchema: z.ZodType<
  GetLinksCountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string().describe(
    "The domain to filter the links by. E.g. `ac.me`. If not provided, all links for the workspace will be returned.",
  ).optional(),
  folderId: z.string().describe("The folder ID to filter the links by.")
    .optional(),
  groupBy: z.union([
    GroupByDomain$zodSchema,
    GroupByTagID$zodSchema,
    GroupByUserID$zodSchema,
    GroupByFolderID$zodSchema,
  ]).optional(),
  search: z.string().describe(
    "The search term to filter the links by. The search term will be matched against the short link slug and the destination url.",
  ).optional(),
  showArchived: z.boolean().default(false).describe(
    "Whether to include archived links in the response. Defaults to `false` if not provided.",
  ),
  tagId: z.string().describe(
    "Deprecated. Use `tagIds` instead. The tag ID to filter the links by.",
  ).optional(),
  tagIds: z.union([
    z.string(),
    z.array(z.string()),
  ]).optional(),
  tagNames: z.union([
    z.string(),
    z.array(z.string()),
  ]).optional(),
  tenantId: z.string().describe(
    "The ID of the tenant that created the link inside your system. If set, will only return links for the specified tenant.",
  ).optional(),
  userId: z.string().describe("The user ID to filter the links by.").optional(),
  withTags: z.boolean().default(false).describe(
    "DEPRECATED. Filter for links that have at least one tag assigned to them.",
  ),
});

export type GetLinksCountResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  number?: number | undefined;
  BadRequest?: BadRequest | undefined;
  Unauthorized?: Unauthorized | undefined;
  Forbidden?: Forbidden | undefined;
  NotFound?: NotFound | undefined;
  Conflict?: Conflict | undefined;
  InviteExpired?: InviteExpired | undefined;
  UnprocessableEntity?: UnprocessableEntity | undefined;
  RateLimitExceeded?: RateLimitExceeded | undefined;
  InternalServerError?: InternalServerError | undefined;
};

export const GetLinksCountResponse$zodSchema: z.ZodType<
  GetLinksCountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BadRequest: BadRequest$zodSchema.optional(),
  Conflict: Conflict$zodSchema.optional(),
  ContentType: z.string(),
  Forbidden: Forbidden$zodSchema.optional(),
  InternalServerError: InternalServerError$zodSchema.optional(),
  InviteExpired: InviteExpired$zodSchema.optional(),
  NotFound: NotFound$zodSchema.optional(),
  RateLimitExceeded: RateLimitExceeded$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  Unauthorized: Unauthorized$zodSchema.optional(),
  UnprocessableEntity: UnprocessableEntity$zodSchema.optional(),
  number: z.number().describe("A list of links").optional(),
});
