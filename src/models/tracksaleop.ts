/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { Conflict, Conflict$zodSchema } from "./conflict.js";
import { Forbidden, Forbidden$zodSchema } from "./forbidden.js";
import {
  InternalServerError,
  InternalServerError$zodSchema,
} from "./internalservererror.js";
import { InviteExpired, InviteExpired$zodSchema } from "./inviteexpired.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import {
  RateLimitExceeded,
  RateLimitExceeded$zodSchema,
} from "./ratelimitexceeded.js";
import { Unauthorized, Unauthorized$zodSchema } from "./unauthorized.js";
import {
  UnprocessableEntity,
  UnprocessableEntity$zodSchema,
} from "./unprocessableentity.js";

/**
 * The payment processor via which the sale was made.
 */
export const TrackSalePaymentProcessor$zodSchema = z.enum([
  "stripe",
  "shopify",
  "polar",
  "paddle",
  "custom",
]).describe("The payment processor via which the sale was made.");

export type TrackSalePaymentProcessor = z.infer<
  typeof TrackSalePaymentProcessor$zodSchema
>;

export type TrackSaleRequest = {
  externalId: string;
  amount: number;
  currency?: string | undefined;
  eventName?: string | undefined;
  paymentProcessor: TrackSalePaymentProcessor;
  invoiceId?: string | null | undefined;
  leadEventName?: string | null | undefined;
  metadata?: { [k: string]: any } | null | undefined;
};

export const TrackSaleRequest$zodSchema: z.ZodType<
  TrackSaleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().int(),
  currency: z.string().default("usd"),
  eventName: z.string().default("Purchase"),
  externalId: z.string(),
  invoiceId: z.string().nullable().default(null),
  leadEventName: z.string().nullable().default(null),
  metadata: z.record(z.any()).nullable().optional(),
  paymentProcessor: TrackSalePaymentProcessor$zodSchema,
});

export type TrackSaleCustomer = {
  id: string;
  name: string | null;
  email: string | null;
  avatar: string | null;
  externalId: string | null;
};

export const TrackSaleCustomer$zodSchema: z.ZodType<
  TrackSaleCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  avatar: z.string().nullable(),
  email: z.string().nullable(),
  externalId: z.string().nullable(),
  id: z.string(),
  name: z.string().nullable(),
});

export type TrackSaleSale = {
  amount: number;
  currency: string;
  paymentProcessor: string;
  invoiceId: string | null;
  metadata: { [k: string]: any } | null;
};

export const TrackSaleSale$zodSchema: z.ZodType<
  TrackSaleSale,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency: z.string(),
  invoiceId: z.string().nullable(),
  metadata: z.record(z.any()).nullable(),
  paymentProcessor: z.string(),
});

/**
 * A sale was tracked.
 */
export type TrackSaleResponseBody = {
  eventName: string;
  customer: TrackSaleCustomer | null;
  sale: TrackSaleSale | null;
};

export const TrackSaleResponseBody$zodSchema: z.ZodType<
  TrackSaleResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer: z.lazy(() => TrackSaleCustomer$zodSchema).nullable(),
  eventName: z.string(),
  sale: z.lazy(() => TrackSaleSale$zodSchema).nullable(),
}).describe("A sale was tracked.");

export type TrackSaleResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  object?: TrackSaleResponseBody | undefined;
  BadRequest?: BadRequest | undefined;
  Unauthorized?: Unauthorized | undefined;
  Forbidden?: Forbidden | undefined;
  NotFound?: NotFound | undefined;
  Conflict?: Conflict | undefined;
  InviteExpired?: InviteExpired | undefined;
  UnprocessableEntity?: UnprocessableEntity | undefined;
  RateLimitExceeded?: RateLimitExceeded | undefined;
  InternalServerError?: InternalServerError | undefined;
};

export const TrackSaleResponse$zodSchema: z.ZodType<
  TrackSaleResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BadRequest: BadRequest$zodSchema.optional(),
  Conflict: Conflict$zodSchema.optional(),
  ContentType: z.string(),
  Forbidden: Forbidden$zodSchema.optional(),
  InternalServerError: InternalServerError$zodSchema.optional(),
  InviteExpired: InviteExpired$zodSchema.optional(),
  NotFound: NotFound$zodSchema.optional(),
  RateLimitExceeded: RateLimitExceeded$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  Unauthorized: Unauthorized$zodSchema.optional(),
  UnprocessableEntity: UnprocessableEntity$zodSchema.optional(),
  object: z.lazy(() => TrackSaleResponseBody$zodSchema).optional(),
});
