/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { Conflict, Conflict$zodSchema } from "./conflict.js";
import { Forbidden, Forbidden$zodSchema } from "./forbidden.js";
import {
  InternalServerError,
  InternalServerError$zodSchema,
} from "./internalservererror.js";
import { InviteExpired, InviteExpired$zodSchema } from "./inviteexpired.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import {
  RateLimitExceeded,
  RateLimitExceeded$zodSchema,
} from "./ratelimitexceeded.js";
import { Unauthorized, Unauthorized$zodSchema } from "./unauthorized.js";
import {
  UnprocessableEntity,
  UnprocessableEntity$zodSchema,
} from "./unprocessableentity.js";
import {
  WorkspaceSchema,
  WorkspaceSchema$zodSchema,
} from "./workspaceschema.js";

export type UpdateWorkspaceRequestBody = {
  name?: string | undefined;
  slug?: string | undefined;
  logo?: string | null | undefined;
  conversionEnabled?: boolean | undefined;
  allowedHostnames?: Array<string> | undefined;
};

export const UpdateWorkspaceRequestBody$zodSchema: z.ZodType<
  UpdateWorkspaceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowedHostnames: z.array(z.string()).optional(),
  conversionEnabled: z.boolean().optional(),
  logo: z.string().nullable().optional(),
  name: z.string().optional(),
  slug: z.string().optional(),
});

export type UpdateWorkspaceRequest = {
  idOrSlug: string;
  RequestBody?: UpdateWorkspaceRequestBody | undefined;
};

export const UpdateWorkspaceRequest$zodSchema: z.ZodType<
  UpdateWorkspaceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() => UpdateWorkspaceRequestBody$zodSchema).optional(),
  idOrSlug: z.string().describe("The ID or slug of the workspace to update."),
});

export type UpdateWorkspaceResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  WorkspaceSchema?: WorkspaceSchema | undefined;
  BadRequest?: BadRequest | undefined;
  Unauthorized?: Unauthorized | undefined;
  Forbidden?: Forbidden | undefined;
  NotFound?: NotFound | undefined;
  Conflict?: Conflict | undefined;
  InviteExpired?: InviteExpired | undefined;
  UnprocessableEntity?: UnprocessableEntity | undefined;
  RateLimitExceeded?: RateLimitExceeded | undefined;
  InternalServerError?: InternalServerError | undefined;
};

export const UpdateWorkspaceResponse$zodSchema: z.ZodType<
  UpdateWorkspaceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BadRequest: BadRequest$zodSchema.optional(),
  Conflict: Conflict$zodSchema.optional(),
  ContentType: z.string(),
  Forbidden: Forbidden$zodSchema.optional(),
  InternalServerError: InternalServerError$zodSchema.optional(),
  InviteExpired: InviteExpired$zodSchema.optional(),
  NotFound: NotFound$zodSchema.optional(),
  RateLimitExceeded: RateLimitExceeded$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  Unauthorized: Unauthorized$zodSchema.optional(),
  UnprocessableEntity: UnprocessableEntity$zodSchema.optional(),
  WorkspaceSchema: WorkspaceSchema$zodSchema.optional(),
});
