/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { Conflict, Conflict$zodSchema } from "./conflict.js";
import { Forbidden, Forbidden$zodSchema } from "./forbidden.js";
import {
  InternalServerError,
  InternalServerError$zodSchema,
} from "./internalservererror.js";
import { InviteExpired, InviteExpired$zodSchema } from "./inviteexpired.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import {
  RateLimitExceeded,
  RateLimitExceeded$zodSchema,
} from "./ratelimitexceeded.js";
import { Unauthorized, Unauthorized$zodSchema } from "./unauthorized.js";
import {
  UnprocessableEntity,
  UnprocessableEntity$zodSchema,
} from "./unprocessableentity.js";

/**
 * The partner's country of residence. Must be passed as a 2-letter ISO 3166-1 country code. Learn more: https://d.to/geo
 */
export const CreateReferralsEmbedTokenCountry$zodSchema = z.enum([
  "AF",
  "AL",
  "DZ",
  "AS",
  "AD",
  "AO",
  "AI",
  "AQ",
  "AG",
  "AR",
  "AM",
  "AW",
  "AU",
  "AT",
  "AZ",
  "BS",
  "BH",
  "BD",
  "BB",
  "BY",
  "BE",
  "BZ",
  "BJ",
  "BM",
  "BT",
  "BO",
  "BA",
  "BW",
  "BV",
  "BR",
  "IO",
  "BN",
  "BG",
  "BF",
  "BI",
  "KH",
  "CM",
  "CA",
  "CV",
  "KY",
  "CF",
  "TD",
  "CL",
  "CN",
  "CX",
  "CC",
  "CO",
  "KM",
  "CG",
  "CD",
  "CK",
  "CR",
  "CI",
  "HR",
  "CU",
  "CY",
  "CZ",
  "DK",
  "DJ",
  "DM",
  "DO",
  "EC",
  "EG",
  "SV",
  "GQ",
  "ER",
  "EE",
  "ET",
  "FK",
  "FO",
  "FJ",
  "FI",
  "FR",
  "GF",
  "PF",
  "TF",
  "GA",
  "GM",
  "GE",
  "DE",
  "GH",
  "GI",
  "GR",
  "GL",
  "GD",
  "GP",
  "GU",
  "GT",
  "GN",
  "GW",
  "GY",
  "HT",
  "HM",
  "VA",
  "HN",
  "HK",
  "HU",
  "IS",
  "IN",
  "ID",
  "IR",
  "IQ",
  "IE",
  "IL",
  "IT",
  "JM",
  "JP",
  "JO",
  "KZ",
  "KE",
  "KI",
  "KP",
  "KR",
  "KW",
  "KG",
  "LA",
  "LV",
  "LB",
  "LS",
  "LR",
  "LY",
  "LI",
  "LT",
  "LU",
  "MO",
  "MG",
  "MW",
  "MY",
  "MV",
  "ML",
  "MT",
  "MH",
  "MQ",
  "MR",
  "MU",
  "YT",
  "MX",
  "FM",
  "MD",
  "MC",
  "MN",
  "MS",
  "MA",
  "MZ",
  "MM",
  "NA",
  "NR",
  "NP",
  "NL",
  "NC",
  "NZ",
  "NI",
  "NE",
  "NG",
  "NU",
  "NF",
  "MK",
  "MP",
  "NO",
  "OM",
  "PK",
  "PW",
  "PS",
  "PA",
  "PG",
  "PY",
  "PE",
  "PH",
  "PN",
  "PL",
  "PT",
  "PR",
  "QA",
  "RE",
  "RO",
  "RU",
  "RW",
  "SH",
  "KN",
  "LC",
  "PM",
  "VC",
  "WS",
  "SM",
  "ST",
  "SA",
  "SN",
  "SC",
  "SL",
  "SG",
  "SK",
  "SI",
  "SB",
  "SO",
  "ZA",
  "GS",
  "ES",
  "LK",
  "SD",
  "SR",
  "SJ",
  "SZ",
  "SE",
  "CH",
  "SY",
  "TW",
  "TJ",
  "TZ",
  "TH",
  "TL",
  "TG",
  "TK",
  "TO",
  "TT",
  "TN",
  "TR",
  "TM",
  "TC",
  "TV",
  "UG",
  "UA",
  "AE",
  "GB",
  "US",
  "UM",
  "UY",
  "UZ",
  "VU",
  "VE",
  "VN",
  "VG",
  "VI",
  "WF",
  "EH",
  "YE",
  "ZM",
  "ZW",
  "AX",
  "BQ",
  "CW",
  "GG",
  "IM",
  "JE",
  "ME",
  "BL",
  "MF",
  "RS",
  "SX",
  "SS",
  "XK",
]).describe(
  "The partner's country of residence. Must be passed as a 2-letter ISO 3166-1 country code. Learn more: https://d.to/geo",
);

export type CreateReferralsEmbedTokenCountry = z.infer<
  typeof CreateReferralsEmbedTokenCountry$zodSchema
>;

/**
 * The unique IDs of the tags assigned to the short link.
 */
export type CreateReferralsEmbedTokenTagIds = string | Array<string>;

export const CreateReferralsEmbedTokenTagIds$zodSchema: z.ZodType<
  CreateReferralsEmbedTokenTagIds,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.string()),
]).describe("The unique IDs of the tags assigned to the short link.");

/**
 * The unique name of the tags assigned to the short link (case insensitive).
 */
export type CreateReferralsEmbedTokenTagNames = string | Array<string>;

export const CreateReferralsEmbedTokenTagNames$zodSchema: z.ZodType<
  CreateReferralsEmbedTokenTagNames,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.string()),
]).describe(
  "The unique name of the tags assigned to the short link (case insensitive).",
);

export type CreateReferralsEmbedTokenTestVariant = {
  url: string;
  percentage: number;
};

export const CreateReferralsEmbedTokenTestVariant$zodSchema: z.ZodType<
  CreateReferralsEmbedTokenTestVariant,
  z.ZodTypeDef,
  unknown
> = z.object({
  percentage: z.number(),
  url: z.string(),
});

/**
 * Additional properties that you can pass to the partner's short link. Will be used to override the default link properties for this partner.
 */
export type CreateReferralsEmbedTokenLinkProps = {
  keyLength?: number | undefined;
  externalId?: string | null | undefined;
  tenantId?: string | null | undefined;
  prefix?: string | undefined;
  archived?: boolean | undefined;
  tagIds?: string | Array<string> | undefined;
  tagNames?: string | Array<string> | undefined;
  folderId?: string | null | undefined;
  comments?: string | null | undefined;
  expiresAt?: string | null | undefined;
  expiredUrl?: string | null | undefined;
  password?: string | null | undefined;
  proxy?: boolean | undefined;
  title?: string | null | undefined;
  description?: string | null | undefined;
  image?: string | null | undefined;
  video?: string | null | undefined;
  rewrite?: boolean | undefined;
  ios?: string | null | undefined;
  android?: string | null | undefined;
  doIndex?: boolean | undefined;
  utm_source?: string | null | undefined;
  utm_medium?: string | null | undefined;
  utm_campaign?: string | null | undefined;
  utm_term?: string | null | undefined;
  utm_content?: string | null | undefined;
  ref?: string | null | undefined;
  testVariants?: Array<CreateReferralsEmbedTokenTestVariant> | null | undefined;
  testStartedAt?: string | null | undefined;
  testCompletedAt?: string | null | undefined;
};

export const CreateReferralsEmbedTokenLinkProps$zodSchema: z.ZodType<
  CreateReferralsEmbedTokenLinkProps,
  z.ZodTypeDef,
  unknown
> = z.object({
  android: z.string().nullable().optional(),
  archived: z.boolean().optional(),
  comments: z.string().nullable().optional(),
  description: z.string().nullable().optional(),
  doIndex: z.boolean().optional(),
  expiredUrl: z.string().nullable().optional(),
  expiresAt: z.string().nullable().optional(),
  externalId: z.string().nullable().optional(),
  folderId: z.string().nullable().optional(),
  image: z.string().nullable().optional(),
  ios: z.string().nullable().optional(),
  keyLength: z.number().optional(),
  password: z.string().nullable().optional(),
  prefix: z.string().optional(),
  proxy: z.boolean().optional(),
  ref: z.string().nullable().optional(),
  rewrite: z.boolean().optional(),
  tagIds: z.union([
    z.string(),
    z.array(z.string()),
  ]).optional(),
  tagNames: z.union([
    z.string(),
    z.array(z.string()),
  ]).optional(),
  tenantId: z.string().nullable().optional(),
  testCompletedAt: z.string().nullable().optional(),
  testStartedAt: z.string().nullable().optional(),
  testVariants: z.array(
    z.lazy(() => CreateReferralsEmbedTokenTestVariant$zodSchema),
  ).nullable().optional(),
  title: z.string().nullable().optional(),
  utm_campaign: z.string().nullable().optional(),
  utm_content: z.string().nullable().optional(),
  utm_medium: z.string().nullable().optional(),
  utm_source: z.string().nullable().optional(),
  utm_term: z.string().nullable().optional(),
  video: z.string().nullable().optional(),
}).describe(
  "Additional properties that you can pass to the partner's short link. Will be used to override the default link properties for this partner.",
);

export type CreateReferralsEmbedTokenPartner = {
  name?: string | null | undefined;
  email: string;
  username?: string | null | undefined;
  image?: string | null | undefined;
  tenantId?: string | undefined;
  country?: CreateReferralsEmbedTokenCountry | null | undefined;
  description?: string | null | undefined;
  linkProps?: CreateReferralsEmbedTokenLinkProps | undefined;
};

export const CreateReferralsEmbedTokenPartner$zodSchema: z.ZodType<
  CreateReferralsEmbedTokenPartner,
  z.ZodTypeDef,
  unknown
> = z.object({
  country: CreateReferralsEmbedTokenCountry$zodSchema.nullable().optional(),
  description: z.string().nullable().optional(),
  email: z.string(),
  image: z.string().nullable().optional(),
  linkProps: z.lazy(() => CreateReferralsEmbedTokenLinkProps$zodSchema)
    .optional(),
  name: z.string().nullable().optional(),
  tenantId: z.string().optional(),
  username: z.string().nullable().optional(),
});

export type CreateReferralsEmbedTokenRequest = {
  partnerId?: string | undefined;
  tenantId?: string | undefined;
  partner?: CreateReferralsEmbedTokenPartner | undefined;
};

export const CreateReferralsEmbedTokenRequest$zodSchema: z.ZodType<
  CreateReferralsEmbedTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  partner: z.lazy(() => CreateReferralsEmbedTokenPartner$zodSchema).optional(),
  partnerId: z.string().optional(),
  tenantId: z.string().optional(),
});

/**
 * The created public embed token.
 */
export type CreateReferralsEmbedTokenResponseBody = {
  publicToken: string;
  expires: string;
};

export const CreateReferralsEmbedTokenResponseBody$zodSchema: z.ZodType<
  CreateReferralsEmbedTokenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  expires: z.string(),
  publicToken: z.string(),
}).describe("The created public embed token.");

export type CreateReferralsEmbedTokenResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  object?: CreateReferralsEmbedTokenResponseBody | undefined;
  BadRequest?: BadRequest | undefined;
  Unauthorized?: Unauthorized | undefined;
  Forbidden?: Forbidden | undefined;
  NotFound?: NotFound | undefined;
  Conflict?: Conflict | undefined;
  InviteExpired?: InviteExpired | undefined;
  UnprocessableEntity?: UnprocessableEntity | undefined;
  RateLimitExceeded?: RateLimitExceeded | undefined;
  InternalServerError?: InternalServerError | undefined;
};

export const CreateReferralsEmbedTokenResponse$zodSchema: z.ZodType<
  CreateReferralsEmbedTokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BadRequest: BadRequest$zodSchema.optional(),
  Conflict: Conflict$zodSchema.optional(),
  ContentType: z.string(),
  Forbidden: Forbidden$zodSchema.optional(),
  InternalServerError: InternalServerError$zodSchema.optional(),
  InviteExpired: InviteExpired$zodSchema.optional(),
  NotFound: NotFound$zodSchema.optional(),
  RateLimitExceeded: RateLimitExceeded$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  Unauthorized: Unauthorized$zodSchema.optional(),
  UnprocessableEntity: UnprocessableEntity$zodSchema.optional(),
  object: z.lazy(() => CreateReferralsEmbedTokenResponseBody$zodSchema)
    .optional(),
});
