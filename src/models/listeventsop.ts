/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { ClickEvent, ClickEvent$zodSchema } from "./clickevent.js";
import { Conflict, Conflict$zodSchema } from "./conflict.js";
import { ContinentCode, ContinentCode$zodSchema } from "./continentcode.js";
import { CountryCode, CountryCode$zodSchema } from "./countrycode.js";
import { Forbidden, Forbidden$zodSchema } from "./forbidden.js";
import {
  InternalServerError,
  InternalServerError$zodSchema,
} from "./internalservererror.js";
import { InviteExpired, InviteExpired$zodSchema } from "./inviteexpired.js";
import { LeadEvent, LeadEvent$zodSchema } from "./leadevent.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import {
  RateLimitExceeded,
  RateLimitExceeded$zodSchema,
} from "./ratelimitexceeded.js";
import { SaleEvent, SaleEvent$zodSchema } from "./saleevent.js";
import { Unauthorized, Unauthorized$zodSchema } from "./unauthorized.js";
import {
  UnprocessableEntity,
  UnprocessableEntity$zodSchema,
} from "./unprocessableentity.js";

/**
 * The type of event to retrieve analytics for. Defaults to 'clicks'.
 */
export const ListEventsEvent$zodSchema = z.enum([
  "clicks",
  "leads",
  "sales",
]).describe(
  "The type of event to retrieve analytics for. Defaults to 'clicks'.",
);

export type ListEventsEvent = z.infer<typeof ListEventsEvent$zodSchema>;

/**
 * The interval to retrieve analytics for. If undefined, defaults to 24h.
 */
export const ListEventsInterval$zodSchema = z.enum([
  "24h",
  "7d",
  "30d",
  "90d",
  "1y",
  "mtd",
  "qtd",
  "ytd",
  "all",
]).describe(
  "The interval to retrieve analytics for. If undefined, defaults to 24h.",
);

export type ListEventsInterval = z.infer<typeof ListEventsInterval$zodSchema>;

/**
 * The trigger to retrieve analytics for. If undefined, return both QR and link clicks.
 */
export const ListEventsTrigger$zodSchema = z.enum([
  "qr",
  "link",
]).describe(
  "The trigger to retrieve analytics for. If undefined, return both QR and link clicks.",
);

export type ListEventsTrigger = z.infer<typeof ListEventsTrigger$zodSchema>;

/**
 * The tag IDs to retrieve analytics for.
 */
export type ListEventsTagIds = string | Array<string>;

export const ListEventsTagIds$zodSchema: z.ZodType<
  ListEventsTagIds,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.string()),
]).describe("The tag IDs to retrieve analytics for.");

/**
 * The sort order. The default is `desc`.
 */
export const ListEventsSortOrder$zodSchema = z.enum([
  "asc",
  "desc",
]).describe("The sort order. The default is `desc`.");

export type ListEventsSortOrder = z.infer<typeof ListEventsSortOrder$zodSchema>;

/**
 * The field to sort the events by. The default is `timestamp`.
 */
export const ListEventsSortBy$zodSchema = z.enum([
  "timestamp",
]).describe("The field to sort the events by. The default is `timestamp`.");

export type ListEventsSortBy = z.infer<typeof ListEventsSortBy$zodSchema>;

/**
 * DEPRECATED. Use `sortOrder` instead.
 *
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export const Order$zodSchema = z.enum([
  "asc",
  "desc",
]).describe("DEPRECATED. Use `sortOrder` instead.");

export type Order = z.infer<typeof Order$zodSchema>;

export type ListEventsRequest = {
  event?: ListEventsEvent | undefined;
  domain?: string | undefined;
  key?: string | undefined;
  linkId?: string | undefined;
  externalId?: string | undefined;
  tenantId?: string | undefined;
  programId?: string | undefined;
  partnerId?: string | undefined;
  customerId?: string | undefined;
  interval?: ListEventsInterval | undefined;
  start?: string | undefined;
  end?: string | undefined;
  timezone?: string | undefined;
  country?: CountryCode | undefined;
  city?: string | undefined;
  region?: string | undefined;
  continent?: ContinentCode | undefined;
  device?: string | undefined;
  browser?: string | undefined;
  os?: string | undefined;
  trigger?: ListEventsTrigger | undefined;
  referer?: string | undefined;
  refererUrl?: string | undefined;
  url?: string | undefined;
  tagId?: string | undefined;
  tagIds?: string | Array<string> | undefined;
  folderId?: string | undefined;
  qr?: boolean | undefined;
  root?: boolean | undefined;
  utm_source?: string | null | undefined;
  utm_medium?: string | null | undefined;
  utm_campaign?: string | null | undefined;
  utm_term?: string | null | undefined;
  utm_content?: string | null | undefined;
  page?: number | undefined;
  limit?: number | undefined;
  sortOrder?: ListEventsSortOrder | undefined;
  sortBy?: ListEventsSortBy | undefined;
  order?: Order | undefined;
};

export const ListEventsRequest$zodSchema: z.ZodType<
  ListEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  browser: z.string().describe("The browser to retrieve analytics for.")
    .optional(),
  city: z.string().describe("The city to retrieve analytics for.").optional(),
  continent: ContinentCode$zodSchema.optional(),
  country: CountryCode$zodSchema.optional(),
  customerId: z.string().describe(
    "The ID of the customer to retrieve analytics for.",
  ).optional(),
  device: z.string().describe("The device to retrieve analytics for.")
    .optional(),
  domain: z.string().describe("The domain to filter analytics for.").optional(),
  end: z.string().describe(
    "The end date and time when to retrieve analytics from. If not provided, defaults to the current date. If set along with `start`, takes precedence over `interval`.",
  ).optional(),
  event: ListEventsEvent$zodSchema.default("clicks"),
  externalId: z.string().describe(
    "The ID of the link in the your database. Must be prefixed with 'ext_' when passed as a query parameter.",
  ).optional(),
  folderId: z.string().describe(
    "The folder ID to retrieve analytics for. If not provided, return analytics for unsorted links.",
  ).optional(),
  interval: ListEventsInterval$zodSchema.optional(),
  key: z.string().describe(
    "The slug of the short link to retrieve analytics for. Must be used along with the corresponding `domain` of the short link to fetch analytics for a specific short link.",
  ).optional(),
  limit: z.number().default(100),
  linkId: z.string().describe(
    "The unique ID of the short link on Dub to retrieve analytics for.",
  ).optional(),
  order: Order$zodSchema.default("desc"),
  os: z.string().describe("The OS to retrieve analytics for.").optional(),
  page: z.number().default(1),
  partnerId: z.string().describe(
    "The ID of the partner to retrieve analytics for.",
  ).optional(),
  programId: z.string().describe(
    "The ID of the program to retrieve analytics for.",
  ).optional(),
  qr: z.boolean().describe(
    "Deprecated. Use the `trigger` field instead. Filter for QR code scans. If true, filter for QR codes only. If false, filter for links only. If undefined, return both.",
  ).optional(),
  referer: z.string().describe("The referer to retrieve analytics for.")
    .optional(),
  refererUrl: z.string().describe(
    "The full referer URL to retrieve analytics for.",
  ).optional(),
  region: z.string().describe(
    "The ISO 3166-2 region code to retrieve analytics for.",
  ).optional(),
  root: z.boolean().describe(
    "Filter for root domains. If true, filter for domains only. If false, filter for links only. If undefined, return both.",
  ).optional(),
  sortBy: ListEventsSortBy$zodSchema.default("timestamp"),
  sortOrder: ListEventsSortOrder$zodSchema.default("desc"),
  start: z.string().describe(
    "The start date and time when to retrieve analytics from. If set, takes precedence over `interval`.",
  ).optional(),
  tagId: z.string().describe(
    "Deprecated. Use `tagIds` instead. The tag ID to retrieve analytics for.",
  ).optional(),
  tagIds: z.union([
    z.string(),
    z.array(z.string()),
  ]).optional(),
  tenantId: z.string().describe(
    "The ID of the tenant that created the link inside your system.",
  ).optional(),
  timezone: z.string().default("UTC").describe(
    "The IANA time zone code for aligning timeseries granularity (e.g. America/New_York). Defaults to UTC.",
  ),
  trigger: ListEventsTrigger$zodSchema.optional(),
  url: z.string().describe("The URL to retrieve analytics for.").optional(),
  utm_campaign: z.string().describe("The UTM campaign of the short link.")
    .nullable().optional(),
  utm_content: z.string().describe("The UTM content of the short link.")
    .nullable().optional(),
  utm_medium: z.string().describe("The UTM medium of the short link.")
    .nullable().optional(),
  utm_source: z.string().describe("The UTM source of the short link.")
    .nullable().optional(),
  utm_term: z.string().describe("The UTM term of the short link.").nullable()
    .optional(),
});

export type ListEventsResponseBody =
  | (ClickEvent & { event: "click" })
  | (LeadEvent & { event: "lead" })
  | (SaleEvent & { event: "sale" });

export const ListEventsResponseBody$zodSchema: z.ZodType<
  ListEventsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  ClickEvent$zodSchema.and(
    z.object({
      event: z.literal("click"),
    }).transform((v) => ({ event: v.event })),
  ),
  LeadEvent$zodSchema.and(
    z.object({
      event: z.literal("lead"),
    }).transform((v) => ({ event: v.event })),
  ),
  SaleEvent$zodSchema.and(
    z.object({
      event: z.literal("sale"),
    }).transform((v) => ({ event: v.event })),
  ),
]);

export type ListEventsResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  ResponseBodies?:
    | Array<
      | (ClickEvent & { event: "click" })
      | (LeadEvent & { event: "lead" })
      | (SaleEvent & { event: "sale" })
    >
    | undefined;
  BadRequest?: BadRequest | undefined;
  Unauthorized?: Unauthorized | undefined;
  Forbidden?: Forbidden | undefined;
  NotFound?: NotFound | undefined;
  Conflict?: Conflict | undefined;
  InviteExpired?: InviteExpired | undefined;
  UnprocessableEntity?: UnprocessableEntity | undefined;
  RateLimitExceeded?: RateLimitExceeded | undefined;
  InternalServerError?: InternalServerError | undefined;
};

export const ListEventsResponse$zodSchema: z.ZodType<
  ListEventsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BadRequest: BadRequest$zodSchema.optional(),
  Conflict: Conflict$zodSchema.optional(),
  ContentType: z.string(),
  Forbidden: Forbidden$zodSchema.optional(),
  InternalServerError: InternalServerError$zodSchema.optional(),
  InviteExpired: InviteExpired$zodSchema.optional(),
  NotFound: NotFound$zodSchema.optional(),
  RateLimitExceeded: RateLimitExceeded$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  ResponseBodies: z.array(z.union([
    ClickEvent$zodSchema.and(
      z.object({
        event: z.literal("click"),
      }).transform((v) => ({ event: v.event })),
    ),
    LeadEvent$zodSchema.and(
      z.object({
        event: z.literal("lead"),
      }).transform((v) => ({ event: v.event })),
    ),
    SaleEvent$zodSchema.and(
      z.object({
        event: z.literal("sale"),
      }).transform((v) => ({ event: v.event })),
    ),
  ])).describe("A list of events").optional(),
  StatusCode: z.number().int(),
  Unauthorized: Unauthorized$zodSchema.optional(),
  UnprocessableEntity: UnprocessableEntity$zodSchema.optional(),
});
