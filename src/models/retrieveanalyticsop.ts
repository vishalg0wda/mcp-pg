/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  AnalyticsBrowsers,
  AnalyticsBrowsers$zodSchema,
} from "./analyticsbrowsers.js";
import {
  AnalyticsCities,
  AnalyticsCities$zodSchema,
} from "./analyticscities.js";
import {
  AnalyticsContinents,
  AnalyticsContinents$zodSchema,
} from "./analyticscontinents.js";
import { AnalyticsCount, AnalyticsCount$zodSchema } from "./analyticscount.js";
import {
  AnalyticsCountries,
  AnalyticsCountries$zodSchema,
} from "./analyticscountries.js";
import {
  AnalyticsDevices,
  AnalyticsDevices$zodSchema,
} from "./analyticsdevices.js";
import { AnalyticsOS, AnalyticsOS$zodSchema } from "./analyticsos.js";
import {
  AnalyticsReferers,
  AnalyticsReferers$zodSchema,
} from "./analyticsreferers.js";
import {
  AnalyticsRefererUrls,
  AnalyticsRefererUrls$zodSchema,
} from "./analyticsrefererurls.js";
import {
  AnalyticsRegions,
  AnalyticsRegions$zodSchema,
} from "./analyticsregions.js";
import {
  AnalyticsTimeseries,
  AnalyticsTimeseries$zodSchema,
} from "./analyticstimeseries.js";
import {
  AnalyticsTopLinks,
  AnalyticsTopLinks$zodSchema,
} from "./analyticstoplinks.js";
import {
  AnalyticsTopUrls,
  AnalyticsTopUrls$zodSchema,
} from "./analyticstopurls.js";
import {
  AnalyticsTriggers,
  AnalyticsTriggers$zodSchema,
} from "./analyticstriggers.js";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { Conflict, Conflict$zodSchema } from "./conflict.js";
import { ContinentCode, ContinentCode$zodSchema } from "./continentcode.js";
import { CountryCode, CountryCode$zodSchema } from "./countrycode.js";
import { Forbidden, Forbidden$zodSchema } from "./forbidden.js";
import {
  InternalServerError,
  InternalServerError$zodSchema,
} from "./internalservererror.js";
import { InviteExpired, InviteExpired$zodSchema } from "./inviteexpired.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import {
  RateLimitExceeded,
  RateLimitExceeded$zodSchema,
} from "./ratelimitexceeded.js";
import { Unauthorized, Unauthorized$zodSchema } from "./unauthorized.js";
import {
  UnprocessableEntity,
  UnprocessableEntity$zodSchema,
} from "./unprocessableentity.js";

/**
 * The type of event to retrieve analytics for. Defaults to `clicks`.
 */
export const RetrieveAnalyticsEvent$zodSchema = z.enum([
  "clicks",
  "leads",
  "sales",
  "composite",
]).describe(
  "The type of event to retrieve analytics for. Defaults to `clicks`.",
);

export type RetrieveAnalyticsEvent = z.infer<
  typeof RetrieveAnalyticsEvent$zodSchema
>;

/**
 * The parameter to group the analytics data points by. Defaults to `count` if undefined.
 */
export const RetrieveAnalyticsGroupBy$zodSchema = z.enum([
  "count",
  "timeseries",
  "continents",
  "regions",
  "countries",
  "cities",
  "devices",
  "browsers",
  "os",
  "trigger",
  "triggers",
  "referers",
  "referer_urls",
  "top_partners",
  "top_links",
  "top_urls",
  "utm_sources",
  "utm_mediums",
  "utm_campaigns",
  "utm_terms",
  "utm_contents",
]).describe(
  "The parameter to group the analytics data points by. Defaults to `count` if undefined.",
);

export type RetrieveAnalyticsGroupBy = z.infer<
  typeof RetrieveAnalyticsGroupBy$zodSchema
>;

/**
 * The interval to retrieve analytics for. If undefined, defaults to 24h.
 */
export const RetrieveAnalyticsInterval$zodSchema = z.enum([
  "24h",
  "7d",
  "30d",
  "90d",
  "1y",
  "mtd",
  "qtd",
  "ytd",
  "all",
]).describe(
  "The interval to retrieve analytics for. If undefined, defaults to 24h.",
);

export type RetrieveAnalyticsInterval = z.infer<
  typeof RetrieveAnalyticsInterval$zodSchema
>;

/**
 * The trigger to retrieve analytics for. If undefined, return both QR and link clicks.
 */
export const RetrieveAnalyticsTrigger$zodSchema = z.enum([
  "qr",
  "link",
]).describe(
  "The trigger to retrieve analytics for. If undefined, return both QR and link clicks.",
);

export type RetrieveAnalyticsTrigger = z.infer<
  typeof RetrieveAnalyticsTrigger$zodSchema
>;

/**
 * The tag IDs to retrieve analytics for.
 */
export type RetrieveAnalyticsTagIds = string | Array<string>;

export const RetrieveAnalyticsTagIds$zodSchema: z.ZodType<
  RetrieveAnalyticsTagIds,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.string()),
]).describe("The tag IDs to retrieve analytics for.");

export type RetrieveAnalyticsRequest = {
  event?: RetrieveAnalyticsEvent | undefined;
  groupBy?: RetrieveAnalyticsGroupBy | undefined;
  domain?: string | undefined;
  key?: string | undefined;
  linkId?: string | undefined;
  externalId?: string | undefined;
  tenantId?: string | undefined;
  programId?: string | undefined;
  partnerId?: string | undefined;
  customerId?: string | undefined;
  interval?: RetrieveAnalyticsInterval | undefined;
  start?: string | undefined;
  end?: string | undefined;
  timezone?: string | undefined;
  country?: CountryCode | undefined;
  city?: string | undefined;
  region?: string | undefined;
  continent?: ContinentCode | undefined;
  device?: string | undefined;
  browser?: string | undefined;
  os?: string | undefined;
  trigger?: RetrieveAnalyticsTrigger | undefined;
  referer?: string | undefined;
  refererUrl?: string | undefined;
  url?: string | undefined;
  tagId?: string | undefined;
  tagIds?: string | Array<string> | undefined;
  folderId?: string | undefined;
  qr?: boolean | undefined;
  root?: boolean | undefined;
  utm_source?: string | null | undefined;
  utm_medium?: string | null | undefined;
  utm_campaign?: string | null | undefined;
  utm_term?: string | null | undefined;
  utm_content?: string | null | undefined;
};

export const RetrieveAnalyticsRequest$zodSchema: z.ZodType<
  RetrieveAnalyticsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  browser: z.string().describe("The browser to retrieve analytics for.")
    .optional(),
  city: z.string().describe("The city to retrieve analytics for.").optional(),
  continent: ContinentCode$zodSchema.optional(),
  country: CountryCode$zodSchema.optional(),
  customerId: z.string().describe(
    "The ID of the customer to retrieve analytics for.",
  ).optional(),
  device: z.string().describe("The device to retrieve analytics for.")
    .optional(),
  domain: z.string().describe("The domain to filter analytics for.").optional(),
  end: z.string().describe(
    "The end date and time when to retrieve analytics from. If not provided, defaults to the current date. If set along with `start`, takes precedence over `interval`.",
  ).optional(),
  event: RetrieveAnalyticsEvent$zodSchema.default("clicks"),
  externalId: z.string().describe(
    "The ID of the link in the your database. Must be prefixed with 'ext_' when passed as a query parameter.",
  ).optional(),
  folderId: z.string().describe(
    "The folder ID to retrieve analytics for. If not provided, return analytics for unsorted links.",
  ).optional(),
  groupBy: RetrieveAnalyticsGroupBy$zodSchema.default("count"),
  interval: RetrieveAnalyticsInterval$zodSchema.optional(),
  key: z.string().describe(
    "The slug of the short link to retrieve analytics for. Must be used along with the corresponding `domain` of the short link to fetch analytics for a specific short link.",
  ).optional(),
  linkId: z.string().describe(
    "The unique ID of the short link on Dub to retrieve analytics for.",
  ).optional(),
  os: z.string().describe("The OS to retrieve analytics for.").optional(),
  partnerId: z.string().describe(
    "The ID of the partner to retrieve analytics for.",
  ).optional(),
  programId: z.string().describe(
    "The ID of the program to retrieve analytics for.",
  ).optional(),
  qr: z.boolean().describe(
    "Deprecated. Use the `trigger` field instead. Filter for QR code scans. If true, filter for QR codes only. If false, filter for links only. If undefined, return both.",
  ).optional(),
  referer: z.string().describe("The referer to retrieve analytics for.")
    .optional(),
  refererUrl: z.string().describe(
    "The full referer URL to retrieve analytics for.",
  ).optional(),
  region: z.string().describe(
    "The ISO 3166-2 region code to retrieve analytics for.",
  ).optional(),
  root: z.boolean().describe(
    "Filter for root domains. If true, filter for domains only. If false, filter for links only. If undefined, return both.",
  ).optional(),
  start: z.string().describe(
    "The start date and time when to retrieve analytics from. If set, takes precedence over `interval`.",
  ).optional(),
  tagId: z.string().describe(
    "Deprecated. Use `tagIds` instead. The tag ID to retrieve analytics for.",
  ).optional(),
  tagIds: z.union([
    z.string(),
    z.array(z.string()),
  ]).optional(),
  tenantId: z.string().describe(
    "The ID of the tenant that created the link inside your system.",
  ).optional(),
  timezone: z.string().default("UTC").describe(
    "The IANA time zone code for aligning timeseries granularity (e.g. America/New_York). Defaults to UTC.",
  ),
  trigger: RetrieveAnalyticsTrigger$zodSchema.optional(),
  url: z.string().describe("The URL to retrieve analytics for.").optional(),
  utm_campaign: z.string().describe("The UTM campaign of the short link.")
    .nullable().optional(),
  utm_content: z.string().describe("The UTM content of the short link.")
    .nullable().optional(),
  utm_medium: z.string().describe("The UTM medium of the short link.")
    .nullable().optional(),
  utm_source: z.string().describe("The UTM source of the short link.")
    .nullable().optional(),
  utm_term: z.string().describe("The UTM term of the short link.").nullable()
    .optional(),
});

/**
 * Analytics data
 */
export type RetrieveAnalyticsResponseBody =
  | AnalyticsCount
  | Array<AnalyticsTimeseries>
  | Array<AnalyticsContinents>
  | Array<AnalyticsCountries>
  | Array<AnalyticsRegions>
  | Array<AnalyticsCities>
  | Array<AnalyticsDevices>
  | Array<AnalyticsBrowsers>
  | Array<AnalyticsOS>
  | Array<AnalyticsTriggers>
  | Array<AnalyticsReferers>
  | Array<AnalyticsRefererUrls>
  | Array<AnalyticsTopLinks>
  | Array<AnalyticsTopUrls>;

export const RetrieveAnalyticsResponseBody$zodSchema: z.ZodType<
  RetrieveAnalyticsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  AnalyticsCount$zodSchema,
  z.array(AnalyticsTimeseries$zodSchema),
  z.array(AnalyticsContinents$zodSchema),
  z.array(AnalyticsCountries$zodSchema),
  z.array(AnalyticsRegions$zodSchema),
  z.array(AnalyticsCities$zodSchema),
  z.array(AnalyticsDevices$zodSchema),
  z.array(AnalyticsBrowsers$zodSchema),
  z.array(AnalyticsOS$zodSchema),
  z.array(AnalyticsTriggers$zodSchema),
  z.array(AnalyticsReferers$zodSchema),
  z.array(AnalyticsRefererUrls$zodSchema),
  z.array(AnalyticsTopLinks$zodSchema),
  z.array(AnalyticsTopUrls$zodSchema),
]).describe("Analytics data");

export type RetrieveAnalyticsResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  oneOf?:
    | AnalyticsCount
    | Array<AnalyticsTimeseries>
    | Array<AnalyticsContinents>
    | Array<AnalyticsCountries>
    | Array<AnalyticsRegions>
    | Array<AnalyticsCities>
    | Array<AnalyticsDevices>
    | Array<AnalyticsBrowsers>
    | Array<AnalyticsOS>
    | Array<AnalyticsTriggers>
    | Array<AnalyticsReferers>
    | Array<AnalyticsRefererUrls>
    | Array<AnalyticsTopLinks>
    | Array<AnalyticsTopUrls>
    | undefined;
  BadRequest?: BadRequest | undefined;
  Unauthorized?: Unauthorized | undefined;
  Forbidden?: Forbidden | undefined;
  NotFound?: NotFound | undefined;
  Conflict?: Conflict | undefined;
  InviteExpired?: InviteExpired | undefined;
  UnprocessableEntity?: UnprocessableEntity | undefined;
  RateLimitExceeded?: RateLimitExceeded | undefined;
  InternalServerError?: InternalServerError | undefined;
};

export const RetrieveAnalyticsResponse$zodSchema: z.ZodType<
  RetrieveAnalyticsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BadRequest: BadRequest$zodSchema.optional(),
  Conflict: Conflict$zodSchema.optional(),
  ContentType: z.string(),
  Forbidden: Forbidden$zodSchema.optional(),
  InternalServerError: InternalServerError$zodSchema.optional(),
  InviteExpired: InviteExpired$zodSchema.optional(),
  NotFound: NotFound$zodSchema.optional(),
  RateLimitExceeded: RateLimitExceeded$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  Unauthorized: Unauthorized$zodSchema.optional(),
  UnprocessableEntity: UnprocessableEntity$zodSchema.optional(),
  oneOf: z.union([
    AnalyticsCount$zodSchema,
    z.array(AnalyticsTimeseries$zodSchema),
    z.array(AnalyticsContinents$zodSchema),
    z.array(AnalyticsCountries$zodSchema),
    z.array(AnalyticsRegions$zodSchema),
    z.array(AnalyticsCities$zodSchema),
    z.array(AnalyticsDevices$zodSchema),
    z.array(AnalyticsBrowsers$zodSchema),
    z.array(AnalyticsOS$zodSchema),
    z.array(AnalyticsTriggers$zodSchema),
    z.array(AnalyticsReferers$zodSchema),
    z.array(AnalyticsRefererUrls$zodSchema),
    z.array(AnalyticsTopLinks$zodSchema),
    z.array(AnalyticsTopUrls$zodSchema),
  ]).optional(),
});
