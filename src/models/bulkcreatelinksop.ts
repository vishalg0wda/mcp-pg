/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { Conflict, Conflict$zodSchema } from "./conflict.js";
import { Forbidden, Forbidden$zodSchema } from "./forbidden.js";
import {
  InternalServerError,
  InternalServerError$zodSchema,
} from "./internalservererror.js";
import { InviteExpired, InviteExpired$zodSchema } from "./inviteexpired.js";
import {
  LinkErrorSchema,
  LinkErrorSchema$zodSchema,
} from "./linkerrorschema.js";
import {
  LinkGeoTargeting,
  LinkGeoTargeting$zodSchema,
} from "./linkgeotargeting.js";
import { LinkSchema, LinkSchema$zodSchema } from "./linkschema.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import {
  RateLimitExceeded,
  RateLimitExceeded$zodSchema,
} from "./ratelimitexceeded.js";
import { Unauthorized, Unauthorized$zodSchema } from "./unauthorized.js";
import {
  UnprocessableEntity,
  UnprocessableEntity$zodSchema,
} from "./unprocessableentity.js";

/**
 * The unique IDs of the tags assigned to the short link.
 */
export type BulkCreateLinksTagIds = string | Array<string>;

export const BulkCreateLinksTagIds$zodSchema: z.ZodType<
  BulkCreateLinksTagIds,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.string()),
]).describe("The unique IDs of the tags assigned to the short link.");

/**
 * The unique name of the tags assigned to the short link (case insensitive).
 */
export type BulkCreateLinksTagNames = string | Array<string>;

export const BulkCreateLinksTagNames$zodSchema: z.ZodType<
  BulkCreateLinksTagNames,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.string()),
]).describe(
  "The unique name of the tags assigned to the short link (case insensitive).",
);

export type BulkCreateLinksTestVariant = { url: string; percentage: number };

export const BulkCreateLinksTestVariant$zodSchema: z.ZodType<
  BulkCreateLinksTestVariant,
  z.ZodTypeDef,
  unknown
> = z.object({
  percentage: z.number(),
  url: z.string(),
});

export type RequestBody = {
  url: string;
  domain?: string | undefined;
  key?: string | undefined;
  keyLength?: number | undefined;
  externalId?: string | null | undefined;
  tenantId?: string | null | undefined;
  programId?: string | null | undefined;
  partnerId?: string | null | undefined;
  prefix?: string | undefined;
  trackConversion?: boolean | undefined;
  archived?: boolean | undefined;
  publicStats?: boolean | undefined;
  tagId?: string | null | undefined;
  tagIds?: string | Array<string> | undefined;
  tagNames?: string | Array<string> | undefined;
  folderId?: string | null | undefined;
  comments?: string | null | undefined;
  expiresAt?: string | null | undefined;
  expiredUrl?: string | null | undefined;
  password?: string | null | undefined;
  proxy?: boolean | undefined;
  title?: string | null | undefined;
  description?: string | null | undefined;
  image?: string | null | undefined;
  video?: string | null | undefined;
  rewrite?: boolean | undefined;
  ios?: string | null | undefined;
  android?: string | null | undefined;
  geo?: LinkGeoTargeting | null | undefined;
  doIndex?: boolean | undefined;
  utm_source?: string | null | undefined;
  utm_medium?: string | null | undefined;
  utm_campaign?: string | null | undefined;
  utm_term?: string | null | undefined;
  utm_content?: string | null | undefined;
  ref?: string | null | undefined;
  webhookIds?: Array<string> | null | undefined;
  testVariants?: Array<BulkCreateLinksTestVariant> | null | undefined;
  testStartedAt?: string | null | undefined;
  testCompletedAt?: string | null | undefined;
};

export const RequestBody$zodSchema: z.ZodType<
  RequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  android: z.string().nullable().optional(),
  archived: z.boolean().optional(),
  comments: z.string().nullable().optional(),
  description: z.string().nullable().optional(),
  doIndex: z.boolean().optional(),
  domain: z.string().optional(),
  expiredUrl: z.string().nullable().optional(),
  expiresAt: z.string().nullable().optional(),
  externalId: z.string().nullable().optional(),
  folderId: z.string().nullable().optional(),
  geo: LinkGeoTargeting$zodSchema.nullable().optional(),
  image: z.string().nullable().optional(),
  ios: z.string().nullable().optional(),
  key: z.string().optional(),
  keyLength: z.number().optional(),
  partnerId: z.string().nullable().optional(),
  password: z.string().nullable().optional(),
  prefix: z.string().optional(),
  programId: z.string().nullable().optional(),
  proxy: z.boolean().optional(),
  publicStats: z.boolean().optional(),
  ref: z.string().nullable().optional(),
  rewrite: z.boolean().optional(),
  tagId: z.string().nullable().optional(),
  tagIds: z.union([
    z.string(),
    z.array(z.string()),
  ]).optional(),
  tagNames: z.union([
    z.string(),
    z.array(z.string()),
  ]).optional(),
  tenantId: z.string().nullable().optional(),
  testCompletedAt: z.string().nullable().optional(),
  testStartedAt: z.string().nullable().optional(),
  testVariants: z.array(z.lazy(() => BulkCreateLinksTestVariant$zodSchema))
    .nullable().optional(),
  title: z.string().nullable().optional(),
  trackConversion: z.boolean().optional(),
  url: z.string(),
  utm_campaign: z.string().nullable().optional(),
  utm_content: z.string().nullable().optional(),
  utm_medium: z.string().nullable().optional(),
  utm_source: z.string().nullable().optional(),
  utm_term: z.string().nullable().optional(),
  video: z.string().nullable().optional(),
  webhookIds: z.array(z.string()).nullable().optional(),
});

export type BulkCreateLinksResponseBody = LinkErrorSchema | LinkSchema;

export const BulkCreateLinksResponseBody$zodSchema: z.ZodType<
  BulkCreateLinksResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  LinkErrorSchema$zodSchema,
  LinkSchema$zodSchema,
]);

export type BulkCreateLinksResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  ResponseBodies?: Array<LinkErrorSchema | LinkSchema> | undefined;
  BadRequest?: BadRequest | undefined;
  Unauthorized?: Unauthorized | undefined;
  Forbidden?: Forbidden | undefined;
  NotFound?: NotFound | undefined;
  Conflict?: Conflict | undefined;
  InviteExpired?: InviteExpired | undefined;
  UnprocessableEntity?: UnprocessableEntity | undefined;
  RateLimitExceeded?: RateLimitExceeded | undefined;
  InternalServerError?: InternalServerError | undefined;
};

export const BulkCreateLinksResponse$zodSchema: z.ZodType<
  BulkCreateLinksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BadRequest: BadRequest$zodSchema.optional(),
  Conflict: Conflict$zodSchema.optional(),
  ContentType: z.string(),
  Forbidden: Forbidden$zodSchema.optional(),
  InternalServerError: InternalServerError$zodSchema.optional(),
  InviteExpired: InviteExpired$zodSchema.optional(),
  NotFound: NotFound$zodSchema.optional(),
  RateLimitExceeded: RateLimitExceeded$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  ResponseBodies: z.array(z.union([
    LinkErrorSchema$zodSchema,
    LinkSchema$zodSchema,
  ])).describe("The created links").optional(),
  StatusCode: z.number().int(),
  Unauthorized: Unauthorized$zodSchema.optional(),
  UnprocessableEntity: UnprocessableEntity$zodSchema.optional(),
});
