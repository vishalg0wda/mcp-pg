/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { McpAgent } from "agents/mcp";
import type { Env } from "../../worker-configuration.js";
import { DubCore } from "../core.js";
import { getContentTypeFromFileName } from "../lib/files.js";
import { createConsoleLogger } from "../mcp-server/console-logger.js";
import { createMCPServer } from "../mcp-server/server.js";
import { landingPage } from "./landing-page.js";

interface State {}

type Props = Record<string, string>;

export class DubMCP extends McpAgent<Env, State, Props> {
  server!: McpServer;

  async init() {
    this.server = createMCPServer({
      logger: createConsoleLogger("debug"),
      getSDK: () => this.getSDK(),
    });
  }

  getSDK() {
    const getHeader = (name: string) => this.props[name] || "";

    const sdk = new DubCore({
      debugLogger: {
        log: (...args) => console.log(...args),
        group: (...args) => console.group(...args),
        groupEnd: (...args) => console.groupEnd(...args),
      },
      security: async () => {
        return { token: getHeader("authorization") };
      },
    });
    return sdk;
  }
}

export default {
  async fetch(request: Request, env: Env, ctx: any) {
    const url = new URL(request.url);

    // Pass auth headers through to the MCP agent
    const headers: Record<string, string> = {};
    for (const [key, value] of request.headers.entries()) {
      headers[key.toLowerCase()] = value;
    }
    ctx.props = headers;

    if (url.pathname === "/sse" || url.pathname.startsWith("/sse/")) {
      return DubMCP.serveSSE("/sse", { binding: "DUB_MCP" }).fetch(
        request,
        env,
        ctx,
      );
    }

    if (url.pathname === "/mcp") {
      return DubMCP.serve("/mcp", { binding: "DUB_MCP" }).fetch(
        request,
        env,
        ctx,
      );
    }

    // Serve DXT file
    if (url.pathname === "/mcp-server.dxt") {
      try {
        // Read the DXT file from filesystem
        const fs = await import("fs/promises");
        const path = await import("path");

        const dxtPath = path.resolve("./mcp-server.dxt");
        const dxtContent = await fs.readFile(dxtPath);

        return new Response(dxtContent, {
          headers: {
            "Content-Type": getContentTypeFromFileName("mcp-server.dxt")
              || "application/octet-stream",
            "Content-Disposition": "attachment; filename=\"mcp-server.dxt\"",
            "Cache-Control": "public, max-age=3600",
          },
        });
      } catch (error) {
        console.error("Error serving DXT file:", error);
        return new Response("DXT file not found", { status: 404 });
      }
    }

    // Landing page
    if (url.pathname === "/") {
      return landingPage(request);
    }

    return new Response("Not found", { status: 404 });
  },
};
