/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { McpAgent } from "agents/mcp";
import type { Env } from "../../worker-configuration.js";
import { DubCore } from "../core.js";
import { getContentTypeFromFileName } from "../lib/files.js";
import { createConsoleLogger } from "../mcp-server/console-logger.js";
import { createMCPServer } from "../mcp-server/server.js";
import { landingPage } from "./landing-page.js";

interface State {}

type Props = Record<string, string>;

export class DubMCP extends McpAgent<Env, State, Props> {
  server!: McpServer;

  async init() {
    this.server = createMCPServer({
      logger: createConsoleLogger("debug"),
      getSDK: () => this.getSDK(),
    });
  }

  getSDK() {
    const getHeader = (name: string) => this.props[name] || "";

    const sdk = new DubCore({
      debugLogger: {
        log: (...args) => console.log(...args),
        group: (...args) => console.group(...args),
        groupEnd: (...args) => console.groupEnd(...args),
      },
      security: async () => {
        return { token: getHeader("authorization") };
      },
    });
    return sdk;
  }
}

/**
 * Fetches the DXT file from a GitHub repository
 */
async function fetchDXTFromGitHub(
  githubRepoUrl: string,
  githubToken?: string
): Promise<Response> {
  // Normalize the GitHub repo URL
  let normalizedUrl: string;

  if (githubRepoUrl.startsWith("https://github.com/")) {
    // Full URL format: https://github.com/user/repo
    normalizedUrl = githubRepoUrl.replace(/\/$/, "");
  } else if (githubRepoUrl.includes("/") && !githubRepoUrl.includes("://")) {
    // Org/repo format: user/repo
    normalizedUrl = `https://github.com/${githubRepoUrl}`;
  } else {
    throw new Error(
      "Invalid GitHub repository URL format. Use either 'org/repo' or 'https://github.com/org/repo'"
    );
  }

  // Convert to raw GitHub URL for the DXT file
  const rawUrl =
    normalizedUrl.replace(
      "https://github.com/",
      "https://raw.githubusercontent.com/"
    ) + "/main/mcp-server.dxt";

  console.log(`Fetching DXT file from: ${rawUrl}`);
  // Prepare headers for GitHub API request
  const fetchHeaders: Record<string, string> = {
    "User-Agent": "Cloudflare-Worker-DXT-Server",
  };

  // Add authentication if GitHub token is provided (for private repos)
  if (githubToken) {
    fetchHeaders["Authorization"] = `Bearer ${githubToken}`;
  }

  // Fetch the DXT file from GitHub
  return await fetch(rawUrl, {
    headers: fetchHeaders,
  });
}

export default {
  async fetch(request: Request, env: Env, ctx: any) {
    const url = new URL(request.url);

    // Pass auth headers through to the MCP agent
    const headers: Record<string, string> = {};
    for (const [key, value] of request.headers.entries()) {
      headers[key.toLowerCase()] = value;
    }
    ctx.props = headers;

    if (url.pathname === "/sse" || url.pathname.startsWith("/sse/")) {
      return DubMCP.serveSSE("/sse", { binding: "DUB_MCP" }).fetch(
        request,
        env,
        ctx
      );
    }

    if (url.pathname === "/mcp") {
      return DubMCP.serve("/mcp", { binding: "DUB_MCP" }).fetch(
        request,
        env,
        ctx
      );
    }

    // Serve DXT file
    if (url.pathname === "/mcp-server.dxt") {
      try {
        // Get GitHub repo URL from environment variable
        const githubRepoUrl = env.GITHUB_REPO_URL;

        if (!githubRepoUrl) {
          console.error("GITHUB_REPO_URL environment variable not set");
          return new Response("DXT file configuration missing", {
            status: 500,
          });
        }

        // Fetch the DXT file from GitHub
        const response = await fetchDXTFromGitHub(
          githubRepoUrl,
          env.GITHUB_TOKEN
        );

        if (!response.ok) {
          console.error(
            `Failed to fetch DXT file: ${response.status} ${response.statusText}`
          );
          if (response.status === 404) {
            return new Response("DXT file not found in repository", {
              status: 404,
            });
          } else if (response.status === 401 || response.status === 403) {
            return new Response(
              "Authentication required for private repository",
              { status: 403 }
            );
          }
          return new Response("Error accessing repository", { status: 500 });
        }

        // Stream the response directly with proper headers
        return new Response(response.body, {
          headers: {
            "Content-Type":
              getContentTypeFromFileName("mcp-server.dxt") ||
              "application/octet-stream",
            "Content-Disposition": 'attachment; filename="mcp-server.dxt"',
            "Cache-Control": "public, max-age=3600",
            "Content-Length": response.headers.get("Content-Length") || "",
          },
        });
      } catch (error) {
        console.error("Error serving DXT file:", error);
        return new Response("Error fetching DXT file", { status: 500 });
      }
    }

    // Landing page
    if (url.pathname === "/") {
      return landingPage(request);
    }

    return new Response("Not found", { status: 404 });
  },
};
